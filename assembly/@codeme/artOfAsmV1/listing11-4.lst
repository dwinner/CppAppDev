Microsoft (R) Macro Assembler (x64) Version 14.15.26730.0   03/10/21 22:04:17
listing11-4.asm						     Page 1 - 1


				; Listing 11-4
				;
				; Performance test for packed versus unpacked
				; instructions. This program times unaligned accesses. 

				        option  casemap:none

 = 0000000A			nl          =       10

 00000000			            .const
 00000000 4C 69 73 74 69	ttlStr      byte    "Listing 11-4", 0
	   6E 67 20 31 31
	   2D 34 00
				           

 00000000			dseg        segment align(64) 'DATA'

				; Aligned data types:

				            align   64
 00000000  00000040 [		alignedData byte    64 dup (0)
	    00
	   ]
 0000000D			dseg        ends



				            
 00000000			            .code
				            externdef printf:proc
				            
				; Return program title to C++ program:

				            public  getTitle
 00000000			getTitle    proc
 00000000  48/ 8D 05		            lea     rax, ttlStr
	   00000000 R
 00000007  C3			            ret
 00000008			getTitle    endp


				; Used for debugging:

 00000008			print       proc
 00000008  50			            push    rax
 00000009  53			            push    rbx
 0000000A  51			            push    rcx
 0000000B  52			            push    rdx
 0000000C  41/ 50		            push    r8
 0000000E  41/ 51		            push    r9
 00000010  41/ 52		            push    r10
 00000012  41/ 53		            push    r11
				            
 00000014  55			            push    rbp
 00000015  48/ 8B EC		            mov     rbp, rsp
 00000018  48/ 83 EC 28		            sub     rsp, 40
 0000001C  48/ 83 E4 F0		            and     rsp, -16
				            
 00000020  48/ 8B 4D 48		            mov     rcx, [rbp+72]   ;Return address
 00000024  E8 00000000 E	            call    printf
				            
 00000029  48/ 8B 4D 48		            mov     rcx, [rbp+72]
 0000002D  48/ FF C9		            dec     rcx
 00000030  48/ FF C1		skipTo0:    inc     rcx
 00000033  80 39 00		            cmp     byte ptr [rcx], 0
 00000036  75 F8		            jne     skipTo0
 00000038  48/ FF C1		            inc     rcx
 0000003B  48/ 89 4D 48		            mov     [rbp+72], rcx
				            
 0000003F  C9			            leave
 00000040  41/ 5B		            pop     r11
 00000042  41/ 5A		            pop     r10
 00000044  41/ 59		            pop     r9
 00000046  41/ 58		            pop     r8
 00000048  5A			            pop     rdx
 00000049  59			            pop     rcx
 0000004A  5B			            pop     rbx
 0000004B  58			            pop     rax
 0000004C  C3			            ret
 0000004D			print       endp



				            
				                    
				            
				; Here is the "asmMain" function.

				        
				            public  asmMain
 0000004D			asmMain     proc
 0000004D  53			            push    rbx
 0000004E  55			            push    rbp
 0000004F  48/ 8B EC		            mov     rbp, rsp
 00000052  48/ 83 EC 38		            sub     rsp, 56         ;Shadow storage
				            
 00000056  E8 FFFFFFAD		            call    print
 0000005B  53 74 61 72 74	            byte    "Starting", nl, 0
	   69 6E 67 0A 00
				            
 00000065  48/ B9		            mov     rcx, 4000000000 ;4,000,000,000
	   00000000EE6B2800
 0000006F  48/ C7 C3		rptLp:      mov     rbx, 15
	   0000000F
 00000076			rptLp2:
 00000076  0F 10 04 1A		            movups  xmm0, xmmword ptr [rdx+rbx*1]
 0000007A  66| 0F 10 04 1A	            movupd  xmm0, real8 ptr   [rdx+rbx*1]
 0000007F  F3/ 0F 6F 04 1A	            movdqu  xmm0, xmmword ptr [rdx+rbx*1]
 00000084  C5 FC/ 10 04 1A	            vmovups ymm0, ymmword ptr [rdx+rbx*1]
 00000089  C5 FD/ 10 04 1A	            vmovupd ymm0, ymmword ptr [rdx+rbx*1]
 0000008E  C5 FE/ 6F 04 1A	            vmovdqu ymm0, ymmword ptr [rdx+rbx*1]
 00000093  62 F1 7C 48/ 10	            vmovups zmm0, zmmword ptr [rdx+rbx*1]
	   04 1A
 0000009A  62 F1 FD 48/ 10	            vmovupd zmm0, zmmword ptr [rdx+rbx*1]
	   04 1A
 000000A1  48/ FF CB		            dec     rbx
 000000A4  79 D0		            jns     rptLp2

 000000A6  48/ FF C9		            dec     rcx
 000000A9  75 C4		            jnz     rptLp
				            
 000000AB  C4 E3 79/ 17 C0	vextractps eax, xmm0, 0 ; imm8 = 0 to 15
	   00
				vextractps rax, xmm0, 0 ; imm8 = 0 to 15
listing11-4.asm(113) : error A2024:invalid operand size for instruction

 000000B1  E8 FFFFFF52		            call    print
 000000B6  44 6F 6E 65 0A	            byte    "Done", nl, 0
	   00
				             
 000000BC  C9			allDone:    leave
 000000BD  5B			            pop     rbx
 000000BE  C3			            ret     ;Returns to caller
 000000BF			asmMain     endp
				            end
Microsoft (R) Macro Assembler (x64) Version 14.15.26730.0   03/10/21 22:04:17
listing11-4.asm						     Symbols 2 - 1




Segments:

                N a m e                  Length   Align   Class

CONST  . . . . . . . . . . . . .	 0000000D 16	  'CONST'	 ReadOnly
dseg . . . . . . . . . . . . . .	 00000040 64	  'DATA'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

asmMain  . . . . . . . . . . . .	P 	 0000004D _TEXT	Length= 00000072 Public
  rptLp  . . . . . . . . . . . .	L 	 0000006F _TEXT	
  rptLp2 . . . . . . . . . . . .	L 	 00000076 _TEXT	
  allDone  . . . . . . . . . . .	L 	 000000BC _TEXT	
getTitle . . . . . . . . . . . .	P 	 00000000 _TEXT	Length= 00000008 Public
print  . . . . . . . . . . . . .	P 	 00000008 _TEXT	Length= 00000045 Public
  skipTo0  . . . . . . . . . . .	L 	 00000030 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

alignedData  . . . . . . . . . .	Byte	 00000000 dseg	
nl . . . . . . . . . . . . . . .	Number	 0000000Ah   
printf . . . . . . . . . . . . .	L 	 00000000 _TEXT	External
ttlStr . . . . . . . . . . . . .	Byte	 00000000 CONST	

	   0 Warnings
	   1 Errors
