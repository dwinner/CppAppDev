// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ManifestProvisioning.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ManifestProvisioning_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ManifestProvisioning_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ManifestProvisioning_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ManifestProvisioning_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ManifestProvisioning_2eproto;
namespace manifest_manager_msg {
class MM_ClientRequest_V1;
class MM_ClientRequest_V1DefaultTypeInternal;
extern MM_ClientRequest_V1DefaultTypeInternal _MM_ClientRequest_V1_default_instance_;
class MM_CollectionVersionAnnounce;
class MM_CollectionVersionAnnounceDefaultTypeInternal;
extern MM_CollectionVersionAnnounceDefaultTypeInternal _MM_CollectionVersionAnnounce_default_instance_;
class MM_ManifestCollection_V1;
class MM_ManifestCollection_V1DefaultTypeInternal;
extern MM_ManifestCollection_V1DefaultTypeInternal _MM_ManifestCollection_V1_default_instance_;
}  // namespace manifest_manager_msg
PROTOBUF_NAMESPACE_OPEN
template<> ::manifest_manager_msg::MM_ClientRequest_V1* Arena::CreateMaybeMessage<::manifest_manager_msg::MM_ClientRequest_V1>(Arena*);
template<> ::manifest_manager_msg::MM_CollectionVersionAnnounce* Arena::CreateMaybeMessage<::manifest_manager_msg::MM_CollectionVersionAnnounce>(Arena*);
template<> ::manifest_manager_msg::MM_ManifestCollection_V1* Arena::CreateMaybeMessage<::manifest_manager_msg::MM_ManifestCollection_V1>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace manifest_manager_msg {

// ===================================================================

class MM_CollectionVersionAnnounce PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:manifest_manager_msg.MM_CollectionVersionAnnounce) */ {
 public:
  inline MM_CollectionVersionAnnounce() : MM_CollectionVersionAnnounce(nullptr) {}
  virtual ~MM_CollectionVersionAnnounce();

  MM_CollectionVersionAnnounce(const MM_CollectionVersionAnnounce& from);
  MM_CollectionVersionAnnounce(MM_CollectionVersionAnnounce&& from) noexcept
    : MM_CollectionVersionAnnounce() {
    *this = ::std::move(from);
  }

  inline MM_CollectionVersionAnnounce& operator=(const MM_CollectionVersionAnnounce& from) {
    CopyFrom(from);
    return *this;
  }
  inline MM_CollectionVersionAnnounce& operator=(MM_CollectionVersionAnnounce&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MM_CollectionVersionAnnounce& default_instance();

  static inline const MM_CollectionVersionAnnounce* internal_default_instance() {
    return reinterpret_cast<const MM_CollectionVersionAnnounce*>(
               &_MM_CollectionVersionAnnounce_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MM_CollectionVersionAnnounce& a, MM_CollectionVersionAnnounce& b) {
    a.Swap(&b);
  }
  inline void Swap(MM_CollectionVersionAnnounce* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MM_CollectionVersionAnnounce* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MM_CollectionVersionAnnounce* New() const final {
    return CreateMaybeMessage<MM_CollectionVersionAnnounce>(nullptr);
  }

  MM_CollectionVersionAnnounce* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MM_CollectionVersionAnnounce>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MM_CollectionVersionAnnounce& from);
  void MergeFrom(const MM_CollectionVersionAnnounce& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MM_CollectionVersionAnnounce* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "manifest_manager_msg.MM_CollectionVersionAnnounce";
  }
  protected:
  explicit MM_CollectionVersionAnnounce(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ManifestProvisioning_2eproto);
    return ::descriptor_table_ManifestProvisioning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionVersionFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // required string CollectionVersion = 2;
  bool has_collectionversion() const;
  private:
  bool _internal_has_collectionversion() const;
  public:
  void clear_collectionversion();
  const std::string& collectionversion() const;
  void set_collectionversion(const std::string& value);
  void set_collectionversion(std::string&& value);
  void set_collectionversion(const char* value);
  void set_collectionversion(const char* value, size_t size);
  std::string* mutable_collectionversion();
  std::string* release_collectionversion();
  void set_allocated_collectionversion(std::string* collectionversion);
  private:
  const std::string& _internal_collectionversion() const;
  void _internal_set_collectionversion(const std::string& value);
  std::string* _internal_mutable_collectionversion();
  public:

  // required uint32 Version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:manifest_manager_msg.MM_CollectionVersionAnnounce)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collectionversion_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  friend struct ::TableStruct_ManifestProvisioning_2eproto;
};
// -------------------------------------------------------------------

class MM_ClientRequest_V1 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:manifest_manager_msg.MM_ClientRequest_V1) */ {
 public:
  inline MM_ClientRequest_V1() : MM_ClientRequest_V1(nullptr) {}
  virtual ~MM_ClientRequest_V1();

  MM_ClientRequest_V1(const MM_ClientRequest_V1& from);
  MM_ClientRequest_V1(MM_ClientRequest_V1&& from) noexcept
    : MM_ClientRequest_V1() {
    *this = ::std::move(from);
  }

  inline MM_ClientRequest_V1& operator=(const MM_ClientRequest_V1& from) {
    CopyFrom(from);
    return *this;
  }
  inline MM_ClientRequest_V1& operator=(MM_ClientRequest_V1&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MM_ClientRequest_V1& default_instance();

  static inline const MM_ClientRequest_V1* internal_default_instance() {
    return reinterpret_cast<const MM_ClientRequest_V1*>(
               &_MM_ClientRequest_V1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MM_ClientRequest_V1& a, MM_ClientRequest_V1& b) {
    a.Swap(&b);
  }
  inline void Swap(MM_ClientRequest_V1* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MM_ClientRequest_V1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MM_ClientRequest_V1* New() const final {
    return CreateMaybeMessage<MM_ClientRequest_V1>(nullptr);
  }

  MM_ClientRequest_V1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MM_ClientRequest_V1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MM_ClientRequest_V1& from);
  void MergeFrom(const MM_ClientRequest_V1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MM_ClientRequest_V1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "manifest_manager_msg.MM_ClientRequest_V1";
  }
  protected:
  explicit MM_ClientRequest_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ManifestProvisioning_2eproto);
    return ::descriptor_table_ManifestProvisioning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionVersionFieldNumber = 1,
  };
  // required string CollectionVersion = 1;
  bool has_collectionversion() const;
  private:
  bool _internal_has_collectionversion() const;
  public:
  void clear_collectionversion();
  const std::string& collectionversion() const;
  void set_collectionversion(const std::string& value);
  void set_collectionversion(std::string&& value);
  void set_collectionversion(const char* value);
  void set_collectionversion(const char* value, size_t size);
  std::string* mutable_collectionversion();
  std::string* release_collectionversion();
  void set_allocated_collectionversion(std::string* collectionversion);
  private:
  const std::string& _internal_collectionversion() const;
  void _internal_set_collectionversion(const std::string& value);
  std::string* _internal_mutable_collectionversion();
  public:

  // @@protoc_insertion_point(class_scope:manifest_manager_msg.MM_ClientRequest_V1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collectionversion_;
  friend struct ::TableStruct_ManifestProvisioning_2eproto;
};
// -------------------------------------------------------------------

class MM_ManifestCollection_V1 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:manifest_manager_msg.MM_ManifestCollection_V1) */ {
 public:
  inline MM_ManifestCollection_V1() : MM_ManifestCollection_V1(nullptr) {}
  virtual ~MM_ManifestCollection_V1();

  MM_ManifestCollection_V1(const MM_ManifestCollection_V1& from);
  MM_ManifestCollection_V1(MM_ManifestCollection_V1&& from) noexcept
    : MM_ManifestCollection_V1() {
    *this = ::std::move(from);
  }

  inline MM_ManifestCollection_V1& operator=(const MM_ManifestCollection_V1& from) {
    CopyFrom(from);
    return *this;
  }
  inline MM_ManifestCollection_V1& operator=(MM_ManifestCollection_V1&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MM_ManifestCollection_V1& default_instance();

  static inline const MM_ManifestCollection_V1* internal_default_instance() {
    return reinterpret_cast<const MM_ManifestCollection_V1*>(
               &_MM_ManifestCollection_V1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MM_ManifestCollection_V1& a, MM_ManifestCollection_V1& b) {
    a.Swap(&b);
  }
  inline void Swap(MM_ManifestCollection_V1* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MM_ManifestCollection_V1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MM_ManifestCollection_V1* New() const final {
    return CreateMaybeMessage<MM_ManifestCollection_V1>(nullptr);
  }

  MM_ManifestCollection_V1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MM_ManifestCollection_V1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MM_ManifestCollection_V1& from);
  void MergeFrom(const MM_ManifestCollection_V1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MM_ManifestCollection_V1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "manifest_manager_msg.MM_ManifestCollection_V1";
  }
  protected:
  explicit MM_ManifestCollection_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ManifestProvisioning_2eproto);
    return ::descriptor_table_ManifestProvisioning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kManifestsFieldNumber = 2,
    kCollectionVersionFieldNumber = 1,
  };
  // repeated string Manifests = 2;
  int manifests_size() const;
  private:
  int _internal_manifests_size() const;
  public:
  void clear_manifests();
  const std::string& manifests(int index) const;
  std::string* mutable_manifests(int index);
  void set_manifests(int index, const std::string& value);
  void set_manifests(int index, std::string&& value);
  void set_manifests(int index, const char* value);
  void set_manifests(int index, const char* value, size_t size);
  std::string* add_manifests();
  void add_manifests(const std::string& value);
  void add_manifests(std::string&& value);
  void add_manifests(const char* value);
  void add_manifests(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& manifests() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_manifests();
  private:
  const std::string& _internal_manifests(int index) const;
  std::string* _internal_add_manifests();
  public:

  // required string CollectionVersion = 1;
  bool has_collectionversion() const;
  private:
  bool _internal_has_collectionversion() const;
  public:
  void clear_collectionversion();
  const std::string& collectionversion() const;
  void set_collectionversion(const std::string& value);
  void set_collectionversion(std::string&& value);
  void set_collectionversion(const char* value);
  void set_collectionversion(const char* value, size_t size);
  std::string* mutable_collectionversion();
  std::string* release_collectionversion();
  void set_allocated_collectionversion(std::string* collectionversion);
  private:
  const std::string& _internal_collectionversion() const;
  void _internal_set_collectionversion(const std::string& value);
  std::string* _internal_mutable_collectionversion();
  public:

  // @@protoc_insertion_point(class_scope:manifest_manager_msg.MM_ManifestCollection_V1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> manifests_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collectionversion_;
  friend struct ::TableStruct_ManifestProvisioning_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MM_CollectionVersionAnnounce

// required uint32 Version = 1;
inline bool MM_CollectionVersionAnnounce::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MM_CollectionVersionAnnounce::has_version() const {
  return _internal_has_version();
}
inline void MM_CollectionVersionAnnounce::clear_version() {
  version_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MM_CollectionVersionAnnounce::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MM_CollectionVersionAnnounce::version() const {
  // @@protoc_insertion_point(field_get:manifest_manager_msg.MM_CollectionVersionAnnounce.Version)
  return _internal_version();
}
inline void MM_CollectionVersionAnnounce::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  version_ = value;
}
inline void MM_CollectionVersionAnnounce::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:manifest_manager_msg.MM_CollectionVersionAnnounce.Version)
}

// required string CollectionVersion = 2;
inline bool MM_CollectionVersionAnnounce::_internal_has_collectionversion() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MM_CollectionVersionAnnounce::has_collectionversion() const {
  return _internal_has_collectionversion();
}
inline void MM_CollectionVersionAnnounce::clear_collectionversion() {
  collectionversion_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MM_CollectionVersionAnnounce::collectionversion() const {
  // @@protoc_insertion_point(field_get:manifest_manager_msg.MM_CollectionVersionAnnounce.CollectionVersion)
  return _internal_collectionversion();
}
inline void MM_CollectionVersionAnnounce::set_collectionversion(const std::string& value) {
  _internal_set_collectionversion(value);
  // @@protoc_insertion_point(field_set:manifest_manager_msg.MM_CollectionVersionAnnounce.CollectionVersion)
}
inline std::string* MM_CollectionVersionAnnounce::mutable_collectionversion() {
  // @@protoc_insertion_point(field_mutable:manifest_manager_msg.MM_CollectionVersionAnnounce.CollectionVersion)
  return _internal_mutable_collectionversion();
}
inline const std::string& MM_CollectionVersionAnnounce::_internal_collectionversion() const {
  return collectionversion_.Get();
}
inline void MM_CollectionVersionAnnounce::_internal_set_collectionversion(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  collectionversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MM_CollectionVersionAnnounce::set_collectionversion(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  collectionversion_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:manifest_manager_msg.MM_CollectionVersionAnnounce.CollectionVersion)
}
inline void MM_CollectionVersionAnnounce::set_collectionversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  collectionversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:manifest_manager_msg.MM_CollectionVersionAnnounce.CollectionVersion)
}
inline void MM_CollectionVersionAnnounce::set_collectionversion(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  collectionversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:manifest_manager_msg.MM_CollectionVersionAnnounce.CollectionVersion)
}
inline std::string* MM_CollectionVersionAnnounce::_internal_mutable_collectionversion() {
  _has_bits_[0] |= 0x00000001u;
  return collectionversion_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MM_CollectionVersionAnnounce::release_collectionversion() {
  // @@protoc_insertion_point(field_release:manifest_manager_msg.MM_CollectionVersionAnnounce.CollectionVersion)
  if (!_internal_has_collectionversion()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return collectionversion_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MM_CollectionVersionAnnounce::set_allocated_collectionversion(std::string* collectionversion) {
  if (collectionversion != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  collectionversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collectionversion,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:manifest_manager_msg.MM_CollectionVersionAnnounce.CollectionVersion)
}

// -------------------------------------------------------------------

// MM_ClientRequest_V1

// required string CollectionVersion = 1;
inline bool MM_ClientRequest_V1::_internal_has_collectionversion() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MM_ClientRequest_V1::has_collectionversion() const {
  return _internal_has_collectionversion();
}
inline void MM_ClientRequest_V1::clear_collectionversion() {
  collectionversion_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MM_ClientRequest_V1::collectionversion() const {
  // @@protoc_insertion_point(field_get:manifest_manager_msg.MM_ClientRequest_V1.CollectionVersion)
  return _internal_collectionversion();
}
inline void MM_ClientRequest_V1::set_collectionversion(const std::string& value) {
  _internal_set_collectionversion(value);
  // @@protoc_insertion_point(field_set:manifest_manager_msg.MM_ClientRequest_V1.CollectionVersion)
}
inline std::string* MM_ClientRequest_V1::mutable_collectionversion() {
  // @@protoc_insertion_point(field_mutable:manifest_manager_msg.MM_ClientRequest_V1.CollectionVersion)
  return _internal_mutable_collectionversion();
}
inline const std::string& MM_ClientRequest_V1::_internal_collectionversion() const {
  return collectionversion_.Get();
}
inline void MM_ClientRequest_V1::_internal_set_collectionversion(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  collectionversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MM_ClientRequest_V1::set_collectionversion(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  collectionversion_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:manifest_manager_msg.MM_ClientRequest_V1.CollectionVersion)
}
inline void MM_ClientRequest_V1::set_collectionversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  collectionversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:manifest_manager_msg.MM_ClientRequest_V1.CollectionVersion)
}
inline void MM_ClientRequest_V1::set_collectionversion(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  collectionversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:manifest_manager_msg.MM_ClientRequest_V1.CollectionVersion)
}
inline std::string* MM_ClientRequest_V1::_internal_mutable_collectionversion() {
  _has_bits_[0] |= 0x00000001u;
  return collectionversion_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MM_ClientRequest_V1::release_collectionversion() {
  // @@protoc_insertion_point(field_release:manifest_manager_msg.MM_ClientRequest_V1.CollectionVersion)
  if (!_internal_has_collectionversion()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return collectionversion_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MM_ClientRequest_V1::set_allocated_collectionversion(std::string* collectionversion) {
  if (collectionversion != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  collectionversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collectionversion,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:manifest_manager_msg.MM_ClientRequest_V1.CollectionVersion)
}

// -------------------------------------------------------------------

// MM_ManifestCollection_V1

// required string CollectionVersion = 1;
inline bool MM_ManifestCollection_V1::_internal_has_collectionversion() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MM_ManifestCollection_V1::has_collectionversion() const {
  return _internal_has_collectionversion();
}
inline void MM_ManifestCollection_V1::clear_collectionversion() {
  collectionversion_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MM_ManifestCollection_V1::collectionversion() const {
  // @@protoc_insertion_point(field_get:manifest_manager_msg.MM_ManifestCollection_V1.CollectionVersion)
  return _internal_collectionversion();
}
inline void MM_ManifestCollection_V1::set_collectionversion(const std::string& value) {
  _internal_set_collectionversion(value);
  // @@protoc_insertion_point(field_set:manifest_manager_msg.MM_ManifestCollection_V1.CollectionVersion)
}
inline std::string* MM_ManifestCollection_V1::mutable_collectionversion() {
  // @@protoc_insertion_point(field_mutable:manifest_manager_msg.MM_ManifestCollection_V1.CollectionVersion)
  return _internal_mutable_collectionversion();
}
inline const std::string& MM_ManifestCollection_V1::_internal_collectionversion() const {
  return collectionversion_.Get();
}
inline void MM_ManifestCollection_V1::_internal_set_collectionversion(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  collectionversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MM_ManifestCollection_V1::set_collectionversion(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  collectionversion_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:manifest_manager_msg.MM_ManifestCollection_V1.CollectionVersion)
}
inline void MM_ManifestCollection_V1::set_collectionversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  collectionversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:manifest_manager_msg.MM_ManifestCollection_V1.CollectionVersion)
}
inline void MM_ManifestCollection_V1::set_collectionversion(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  collectionversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:manifest_manager_msg.MM_ManifestCollection_V1.CollectionVersion)
}
inline std::string* MM_ManifestCollection_V1::_internal_mutable_collectionversion() {
  _has_bits_[0] |= 0x00000001u;
  return collectionversion_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MM_ManifestCollection_V1::release_collectionversion() {
  // @@protoc_insertion_point(field_release:manifest_manager_msg.MM_ManifestCollection_V1.CollectionVersion)
  if (!_internal_has_collectionversion()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return collectionversion_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MM_ManifestCollection_V1::set_allocated_collectionversion(std::string* collectionversion) {
  if (collectionversion != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  collectionversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collectionversion,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:manifest_manager_msg.MM_ManifestCollection_V1.CollectionVersion)
}

// repeated string Manifests = 2;
inline int MM_ManifestCollection_V1::_internal_manifests_size() const {
  return manifests_.size();
}
inline int MM_ManifestCollection_V1::manifests_size() const {
  return _internal_manifests_size();
}
inline void MM_ManifestCollection_V1::clear_manifests() {
  manifests_.Clear();
}
inline std::string* MM_ManifestCollection_V1::add_manifests() {
  // @@protoc_insertion_point(field_add_mutable:manifest_manager_msg.MM_ManifestCollection_V1.Manifests)
  return _internal_add_manifests();
}
inline const std::string& MM_ManifestCollection_V1::_internal_manifests(int index) const {
  return manifests_.Get(index);
}
inline const std::string& MM_ManifestCollection_V1::manifests(int index) const {
  // @@protoc_insertion_point(field_get:manifest_manager_msg.MM_ManifestCollection_V1.Manifests)
  return _internal_manifests(index);
}
inline std::string* MM_ManifestCollection_V1::mutable_manifests(int index) {
  // @@protoc_insertion_point(field_mutable:manifest_manager_msg.MM_ManifestCollection_V1.Manifests)
  return manifests_.Mutable(index);
}
inline void MM_ManifestCollection_V1::set_manifests(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:manifest_manager_msg.MM_ManifestCollection_V1.Manifests)
  manifests_.Mutable(index)->assign(value);
}
inline void MM_ManifestCollection_V1::set_manifests(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:manifest_manager_msg.MM_ManifestCollection_V1.Manifests)
  manifests_.Mutable(index)->assign(std::move(value));
}
inline void MM_ManifestCollection_V1::set_manifests(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  manifests_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:manifest_manager_msg.MM_ManifestCollection_V1.Manifests)
}
inline void MM_ManifestCollection_V1::set_manifests(int index, const char* value, size_t size) {
  manifests_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:manifest_manager_msg.MM_ManifestCollection_V1.Manifests)
}
inline std::string* MM_ManifestCollection_V1::_internal_add_manifests() {
  return manifests_.Add();
}
inline void MM_ManifestCollection_V1::add_manifests(const std::string& value) {
  manifests_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:manifest_manager_msg.MM_ManifestCollection_V1.Manifests)
}
inline void MM_ManifestCollection_V1::add_manifests(std::string&& value) {
  manifests_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:manifest_manager_msg.MM_ManifestCollection_V1.Manifests)
}
inline void MM_ManifestCollection_V1::add_manifests(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  manifests_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:manifest_manager_msg.MM_ManifestCollection_V1.Manifests)
}
inline void MM_ManifestCollection_V1::add_manifests(const char* value, size_t size) {
  manifests_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:manifest_manager_msg.MM_ManifestCollection_V1.Manifests)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MM_ManifestCollection_V1::manifests() const {
  // @@protoc_insertion_point(field_list:manifest_manager_msg.MM_ManifestCollection_V1.Manifests)
  return manifests_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MM_ManifestCollection_V1::mutable_manifests() {
  // @@protoc_insertion_point(field_mutable_list:manifest_manager_msg.MM_ManifestCollection_V1.Manifests)
  return &manifests_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace manifest_manager_msg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ManifestProvisioning_2eproto
