// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ManifestProvisioning.proto

#include "ManifestProvisioning.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace manifest_manager_msg {
class MM_CollectionVersionAnnounceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MM_CollectionVersionAnnounce> _instance;
} _MM_CollectionVersionAnnounce_default_instance_;
class MM_ClientRequest_V1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MM_ClientRequest_V1> _instance;
} _MM_ClientRequest_V1_default_instance_;
class MM_ManifestCollection_V1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MM_ManifestCollection_V1> _instance;
} _MM_ManifestCollection_V1_default_instance_;
}  // namespace manifest_manager_msg
static void InitDefaultsscc_info_MM_ClientRequest_V1_ManifestProvisioning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::manifest_manager_msg::_MM_ClientRequest_V1_default_instance_;
    new (ptr) ::manifest_manager_msg::MM_ClientRequest_V1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MM_ClientRequest_V1_ManifestProvisioning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MM_ClientRequest_V1_ManifestProvisioning_2eproto}, {}};

static void InitDefaultsscc_info_MM_CollectionVersionAnnounce_ManifestProvisioning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::manifest_manager_msg::_MM_CollectionVersionAnnounce_default_instance_;
    new (ptr) ::manifest_manager_msg::MM_CollectionVersionAnnounce();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MM_CollectionVersionAnnounce_ManifestProvisioning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MM_CollectionVersionAnnounce_ManifestProvisioning_2eproto}, {}};

static void InitDefaultsscc_info_MM_ManifestCollection_V1_ManifestProvisioning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::manifest_manager_msg::_MM_ManifestCollection_V1_default_instance_;
    new (ptr) ::manifest_manager_msg::MM_ManifestCollection_V1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MM_ManifestCollection_V1_ManifestProvisioning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MM_ManifestCollection_V1_ManifestProvisioning_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ManifestProvisioning_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ManifestProvisioning_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ManifestProvisioning_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ManifestProvisioning_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::manifest_manager_msg::MM_CollectionVersionAnnounce, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::manifest_manager_msg::MM_CollectionVersionAnnounce, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::manifest_manager_msg::MM_CollectionVersionAnnounce, version_),
  PROTOBUF_FIELD_OFFSET(::manifest_manager_msg::MM_CollectionVersionAnnounce, collectionversion_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::manifest_manager_msg::MM_ClientRequest_V1, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::manifest_manager_msg::MM_ClientRequest_V1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::manifest_manager_msg::MM_ClientRequest_V1, collectionversion_),
  0,
  PROTOBUF_FIELD_OFFSET(::manifest_manager_msg::MM_ManifestCollection_V1, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::manifest_manager_msg::MM_ManifestCollection_V1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::manifest_manager_msg::MM_ManifestCollection_V1, collectionversion_),
  PROTOBUF_FIELD_OFFSET(::manifest_manager_msg::MM_ManifestCollection_V1, manifests_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::manifest_manager_msg::MM_CollectionVersionAnnounce)},
  { 9, 15, sizeof(::manifest_manager_msg::MM_ClientRequest_V1)},
  { 16, 23, sizeof(::manifest_manager_msg::MM_ManifestCollection_V1)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::manifest_manager_msg::_MM_CollectionVersionAnnounce_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::manifest_manager_msg::_MM_ClientRequest_V1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::manifest_manager_msg::_MM_ManifestCollection_V1_default_instance_),
};

const char descriptor_table_protodef_ManifestProvisioning_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032ManifestProvisioning.proto\022\024manifest_m"
  "anager_msg\"J\n\034MM_CollectionVersionAnnoun"
  "ce\022\017\n\007Version\030\001 \002(\r\022\031\n\021CollectionVersion"
  "\030\002 \002(\t\"0\n\023MM_ClientRequest_V1\022\031\n\021Collect"
  "ionVersion\030\001 \002(\t\"H\n\030MM_ManifestCollectio"
  "n_V1\022\031\n\021CollectionVersion\030\001 \002(\t\022\021\n\tManif"
  "ests\030\002 \003(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ManifestProvisioning_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ManifestProvisioning_2eproto_sccs[3] = {
  &scc_info_MM_ClientRequest_V1_ManifestProvisioning_2eproto.base,
  &scc_info_MM_CollectionVersionAnnounce_ManifestProvisioning_2eproto.base,
  &scc_info_MM_ManifestCollection_V1_ManifestProvisioning_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ManifestProvisioning_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ManifestProvisioning_2eproto = {
  false, false, descriptor_table_protodef_ManifestProvisioning_2eproto, "ManifestProvisioning.proto", 250,
  &descriptor_table_ManifestProvisioning_2eproto_once, descriptor_table_ManifestProvisioning_2eproto_sccs, descriptor_table_ManifestProvisioning_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_ManifestProvisioning_2eproto::offsets,
  file_level_metadata_ManifestProvisioning_2eproto, 3, file_level_enum_descriptors_ManifestProvisioning_2eproto, file_level_service_descriptors_ManifestProvisioning_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ManifestProvisioning_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ManifestProvisioning_2eproto)), true);
namespace manifest_manager_msg {

// ===================================================================

class MM_CollectionVersionAnnounce::_Internal {
 public:
  using HasBits = decltype(std::declval<MM_CollectionVersionAnnounce>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_collectionversion(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

MM_CollectionVersionAnnounce::MM_CollectionVersionAnnounce(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:manifest_manager_msg.MM_CollectionVersionAnnounce)
}
MM_CollectionVersionAnnounce::MM_CollectionVersionAnnounce(const MM_CollectionVersionAnnounce& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  collectionversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_collectionversion()) {
    collectionversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_collectionversion(), 
      GetArena());
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:manifest_manager_msg.MM_CollectionVersionAnnounce)
}

void MM_CollectionVersionAnnounce::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MM_CollectionVersionAnnounce_ManifestProvisioning_2eproto.base);
  collectionversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
}

MM_CollectionVersionAnnounce::~MM_CollectionVersionAnnounce() {
  // @@protoc_insertion_point(destructor:manifest_manager_msg.MM_CollectionVersionAnnounce)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MM_CollectionVersionAnnounce::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  collectionversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MM_CollectionVersionAnnounce::ArenaDtor(void* object) {
  MM_CollectionVersionAnnounce* _this = reinterpret_cast< MM_CollectionVersionAnnounce* >(object);
  (void)_this;
}
void MM_CollectionVersionAnnounce::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MM_CollectionVersionAnnounce::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MM_CollectionVersionAnnounce& MM_CollectionVersionAnnounce::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MM_CollectionVersionAnnounce_ManifestProvisioning_2eproto.base);
  return *internal_default_instance();
}


void MM_CollectionVersionAnnounce::Clear() {
// @@protoc_insertion_point(message_clear_start:manifest_manager_msg.MM_CollectionVersionAnnounce)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    collectionversion_.ClearNonDefaultToEmpty();
  }
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MM_CollectionVersionAnnounce::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 Version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string CollectionVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_collectionversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "manifest_manager_msg.MM_CollectionVersionAnnounce.CollectionVersion");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MM_CollectionVersionAnnounce::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:manifest_manager_msg.MM_CollectionVersionAnnounce)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // required string CollectionVersion = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_collectionversion().data(), static_cast<int>(this->_internal_collectionversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "manifest_manager_msg.MM_CollectionVersionAnnounce.CollectionVersion");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_collectionversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:manifest_manager_msg.MM_CollectionVersionAnnounce)
  return target;
}

size_t MM_CollectionVersionAnnounce::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:manifest_manager_msg.MM_CollectionVersionAnnounce)
  size_t total_size = 0;

  if (_internal_has_collectionversion()) {
    // required string CollectionVersion = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collectionversion());
  }

  if (_internal_has_version()) {
    // required uint32 Version = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  return total_size;
}
size_t MM_CollectionVersionAnnounce::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:manifest_manager_msg.MM_CollectionVersionAnnounce)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string CollectionVersion = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collectionversion());

    // required uint32 Version = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MM_CollectionVersionAnnounce::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:manifest_manager_msg.MM_CollectionVersionAnnounce)
  GOOGLE_DCHECK_NE(&from, this);
  const MM_CollectionVersionAnnounce* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MM_CollectionVersionAnnounce>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:manifest_manager_msg.MM_CollectionVersionAnnounce)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:manifest_manager_msg.MM_CollectionVersionAnnounce)
    MergeFrom(*source);
  }
}

void MM_CollectionVersionAnnounce::MergeFrom(const MM_CollectionVersionAnnounce& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:manifest_manager_msg.MM_CollectionVersionAnnounce)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_collectionversion(from._internal_collectionversion());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MM_CollectionVersionAnnounce::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:manifest_manager_msg.MM_CollectionVersionAnnounce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MM_CollectionVersionAnnounce::CopyFrom(const MM_CollectionVersionAnnounce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:manifest_manager_msg.MM_CollectionVersionAnnounce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MM_CollectionVersionAnnounce::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void MM_CollectionVersionAnnounce::InternalSwap(MM_CollectionVersionAnnounce* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  collectionversion_.Swap(&other->collectionversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MM_CollectionVersionAnnounce::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MM_ClientRequest_V1::_Internal {
 public:
  using HasBits = decltype(std::declval<MM_ClientRequest_V1>()._has_bits_);
  static void set_has_collectionversion(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

MM_ClientRequest_V1::MM_ClientRequest_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:manifest_manager_msg.MM_ClientRequest_V1)
}
MM_ClientRequest_V1::MM_ClientRequest_V1(const MM_ClientRequest_V1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  collectionversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_collectionversion()) {
    collectionversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_collectionversion(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:manifest_manager_msg.MM_ClientRequest_V1)
}

void MM_ClientRequest_V1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MM_ClientRequest_V1_ManifestProvisioning_2eproto.base);
  collectionversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MM_ClientRequest_V1::~MM_ClientRequest_V1() {
  // @@protoc_insertion_point(destructor:manifest_manager_msg.MM_ClientRequest_V1)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MM_ClientRequest_V1::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  collectionversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MM_ClientRequest_V1::ArenaDtor(void* object) {
  MM_ClientRequest_V1* _this = reinterpret_cast< MM_ClientRequest_V1* >(object);
  (void)_this;
}
void MM_ClientRequest_V1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MM_ClientRequest_V1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MM_ClientRequest_V1& MM_ClientRequest_V1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MM_ClientRequest_V1_ManifestProvisioning_2eproto.base);
  return *internal_default_instance();
}


void MM_ClientRequest_V1::Clear() {
// @@protoc_insertion_point(message_clear_start:manifest_manager_msg.MM_ClientRequest_V1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    collectionversion_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MM_ClientRequest_V1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string CollectionVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_collectionversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "manifest_manager_msg.MM_ClientRequest_V1.CollectionVersion");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MM_ClientRequest_V1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:manifest_manager_msg.MM_ClientRequest_V1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string CollectionVersion = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_collectionversion().data(), static_cast<int>(this->_internal_collectionversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "manifest_manager_msg.MM_ClientRequest_V1.CollectionVersion");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_collectionversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:manifest_manager_msg.MM_ClientRequest_V1)
  return target;
}

size_t MM_ClientRequest_V1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:manifest_manager_msg.MM_ClientRequest_V1)
  size_t total_size = 0;

  // required string CollectionVersion = 1;
  if (_internal_has_collectionversion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collectionversion());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MM_ClientRequest_V1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:manifest_manager_msg.MM_ClientRequest_V1)
  GOOGLE_DCHECK_NE(&from, this);
  const MM_ClientRequest_V1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MM_ClientRequest_V1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:manifest_manager_msg.MM_ClientRequest_V1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:manifest_manager_msg.MM_ClientRequest_V1)
    MergeFrom(*source);
  }
}

void MM_ClientRequest_V1::MergeFrom(const MM_ClientRequest_V1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:manifest_manager_msg.MM_ClientRequest_V1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_collectionversion()) {
    _internal_set_collectionversion(from._internal_collectionversion());
  }
}

void MM_ClientRequest_V1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:manifest_manager_msg.MM_ClientRequest_V1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MM_ClientRequest_V1::CopyFrom(const MM_ClientRequest_V1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:manifest_manager_msg.MM_ClientRequest_V1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MM_ClientRequest_V1::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void MM_ClientRequest_V1::InternalSwap(MM_ClientRequest_V1* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  collectionversion_.Swap(&other->collectionversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MM_ClientRequest_V1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MM_ManifestCollection_V1::_Internal {
 public:
  using HasBits = decltype(std::declval<MM_ManifestCollection_V1>()._has_bits_);
  static void set_has_collectionversion(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

MM_ManifestCollection_V1::MM_ManifestCollection_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  manifests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:manifest_manager_msg.MM_ManifestCollection_V1)
}
MM_ManifestCollection_V1::MM_ManifestCollection_V1(const MM_ManifestCollection_V1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      manifests_(from.manifests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  collectionversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_collectionversion()) {
    collectionversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_collectionversion(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:manifest_manager_msg.MM_ManifestCollection_V1)
}

void MM_ManifestCollection_V1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MM_ManifestCollection_V1_ManifestProvisioning_2eproto.base);
  collectionversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MM_ManifestCollection_V1::~MM_ManifestCollection_V1() {
  // @@protoc_insertion_point(destructor:manifest_manager_msg.MM_ManifestCollection_V1)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MM_ManifestCollection_V1::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  collectionversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MM_ManifestCollection_V1::ArenaDtor(void* object) {
  MM_ManifestCollection_V1* _this = reinterpret_cast< MM_ManifestCollection_V1* >(object);
  (void)_this;
}
void MM_ManifestCollection_V1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MM_ManifestCollection_V1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MM_ManifestCollection_V1& MM_ManifestCollection_V1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MM_ManifestCollection_V1_ManifestProvisioning_2eproto.base);
  return *internal_default_instance();
}


void MM_ManifestCollection_V1::Clear() {
// @@protoc_insertion_point(message_clear_start:manifest_manager_msg.MM_ManifestCollection_V1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manifests_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    collectionversion_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MM_ManifestCollection_V1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string CollectionVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_collectionversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "manifest_manager_msg.MM_ManifestCollection_V1.CollectionVersion");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string Manifests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_manifests();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "manifest_manager_msg.MM_ManifestCollection_V1.Manifests");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MM_ManifestCollection_V1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:manifest_manager_msg.MM_ManifestCollection_V1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string CollectionVersion = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_collectionversion().data(), static_cast<int>(this->_internal_collectionversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "manifest_manager_msg.MM_ManifestCollection_V1.CollectionVersion");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_collectionversion(), target);
  }

  // repeated string Manifests = 2;
  for (int i = 0, n = this->_internal_manifests_size(); i < n; i++) {
    const auto& s = this->_internal_manifests(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "manifest_manager_msg.MM_ManifestCollection_V1.Manifests");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:manifest_manager_msg.MM_ManifestCollection_V1)
  return target;
}

size_t MM_ManifestCollection_V1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:manifest_manager_msg.MM_ManifestCollection_V1)
  size_t total_size = 0;

  // required string CollectionVersion = 1;
  if (_internal_has_collectionversion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collectionversion());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Manifests = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(manifests_.size());
  for (int i = 0, n = manifests_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      manifests_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MM_ManifestCollection_V1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:manifest_manager_msg.MM_ManifestCollection_V1)
  GOOGLE_DCHECK_NE(&from, this);
  const MM_ManifestCollection_V1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MM_ManifestCollection_V1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:manifest_manager_msg.MM_ManifestCollection_V1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:manifest_manager_msg.MM_ManifestCollection_V1)
    MergeFrom(*source);
  }
}

void MM_ManifestCollection_V1::MergeFrom(const MM_ManifestCollection_V1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:manifest_manager_msg.MM_ManifestCollection_V1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  manifests_.MergeFrom(from.manifests_);
  if (from._internal_has_collectionversion()) {
    _internal_set_collectionversion(from._internal_collectionversion());
  }
}

void MM_ManifestCollection_V1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:manifest_manager_msg.MM_ManifestCollection_V1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MM_ManifestCollection_V1::CopyFrom(const MM_ManifestCollection_V1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:manifest_manager_msg.MM_ManifestCollection_V1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MM_ManifestCollection_V1::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void MM_ManifestCollection_V1::InternalSwap(MM_ManifestCollection_V1* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  manifests_.InternalSwap(&other->manifests_);
  collectionversion_.Swap(&other->collectionversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MM_ManifestCollection_V1::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace manifest_manager_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::manifest_manager_msg::MM_CollectionVersionAnnounce* Arena::CreateMaybeMessage< ::manifest_manager_msg::MM_CollectionVersionAnnounce >(Arena* arena) {
  return Arena::CreateMessageInternal< ::manifest_manager_msg::MM_CollectionVersionAnnounce >(arena);
}
template<> PROTOBUF_NOINLINE ::manifest_manager_msg::MM_ClientRequest_V1* Arena::CreateMaybeMessage< ::manifest_manager_msg::MM_ClientRequest_V1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::manifest_manager_msg::MM_ClientRequest_V1 >(arena);
}
template<> PROTOBUF_NOINLINE ::manifest_manager_msg::MM_ManifestCollection_V1* Arena::CreateMaybeMessage< ::manifest_manager_msg::MM_ManifestCollection_V1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::manifest_manager_msg::MM_ManifestCollection_V1 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
