/* Generated by Together */
#ifndef WIM__SCHEDULER_H
#define WIM__SCHEDULER_H
/******************************************************************************
*=====================      Copyright by Continental AG      ==================
*******************************************************************************
* Titel        : WIM__Scheduler.h
*
* Description  : Package private interface of scheduler-class:
*                Ressource scheduler, checks messages for their requests to be
*                outputed on display and/or acoustic channel. It also controls
*                synchronisation and requests the output channels 
*
* Responsible  : L.Gruenewald, Schleissheimer GmbH
*
* Guidelines   : SMK 3.3  
*
* Template name: OOLite Codefile, Revision 1.0
*
* CASE-Tool    : Together Controlcenter, Version 6.2
*
* Revision List: (Will be filled by PVCS)
* Archive: $Log: WIM__Scheduler.h  $
* Archive: Revision 1.1.2.7 2014/08/13 17:16:58CEST Immel-EXT, Marc (uid37561) 
* Archive: DC MR 42077: WIM: SLACK is displayed with noise
* Archive: DC MR 41987: WIM: Break of 100ms is seen in case of acoustic replacement async to async - #10894
* Archive: DC MR 41983: WIM: Start of "BSM Warnton" output is delayed >300ms - WDM 337
* Archive: DC MR 41981: BR213-EL/E008, WIM: Minimum display time are extended after retriggering - WDM 348
* Archive: DC MR 41975: WIM: Change HIL timing for single line acknowledgements according to customer - WDM257
* Archive: Revision 1.1.2.6 2014/06/06 17:05:10CEST Wagner-EXT, Alexander (uidw3785) 
* Archive: DC MR 38112 : WIM: Introduction of "Singleline Acknowledgements" - MR47
* Archive: DC MR 40764 : WIM: Changes after code review for single line acknowledgements -  ORM 7144
* Archive: DC MR 40531 : Single line acknowledgement should cancel a running startup animation
* Archive: Revision 1.1.2.5 2014/03/21 13:02:59CET Wagner-EXT, Alexander (uidw3785) 
* Archive: DC MR 39524 : WIM: Correct interval acoustic handling and HIL feedback
* Archive: DC MR 39163 : WIM: Overcome illegal memory access and correction of HMI acoustics notification
* Archive: DC MR 40021 : WIM: Sound of FCW warning is not retriggered after reset
* Archive: Revision 1.1.2.4 2013/11/22 16:57:06CET Wagner-EXT, Alexander (uidw3785) 
* Archive: DC MR 36779 : BR213EL, E006, Implementation of new WarnDB
* Archive: DC MR 36462 : WIM: Implement new scheduling and state handling for acoustic part
* Archive: Revision 1.1.2.3 2013/05/17 16:09:24CEST Immel-EXT, Marc (uid37561) 
* Archive: DC MR 33413: BR213EL/GC, E004, WIM: Takeover of the latest changes from BR205
* Archive: Revision 1.1.2.2 2013/03/27 17:25:02CET Immel-EXT, Marc (uid37561) 
* Archive: Initial revision
* Archive: Member added to project /id/dag_PF3/sw/pkg/wim/core/coreGenPF3GC/project.pj
* Archive: Revision 1.7 2012/11/01 17:24:36CET Immel-EXT, Marc (uid37561) 
* Archive: DC MR 30267: BR222 E010, WIM: Acoustic problems found in customer pre tests of E7.6.pre30 frame - WDM56897
* Archive: DC MR 30242: E010: WIM, Correction of display state detection/ behaviour of wake-up warnings
* Archive: DC MR 26090: W222, E010/GC, WIM: Flashing dashes for warnings [WDM53127]
* Archive: Revision 1.6 2012/10/18 16:57:05CEST Immel Marc (uid37561) (uid37561) 
* Archive: DC MR 27470: W222, E010/GC, WIM: Active sound shall play to the end when display goes off - ÄLP2896
* Archive: DC MR 29924: E010: WIM acoustic problems: corrections for WDM53980, 53982 and 53999
* Archive: DC MR 29926: W222GC: WDM47699 WIM do not differs between Frontal and Lateral Collision warning sound
* Archive: DC MR 29928: W222, E010/GC, WIM: Sync acoustic is delayed too long
* Archive: DC MR 29866: BR222, E010/GC, WIM: Redesign of fault memory entry management
* Archive: DC MR 30023: W222IC-GC, E010: When displaying the oil switch warning the GC makes a reset
* Archive: Revision 1.5 2012/05/18 10:42:43CEST Gottwalles Dirk (uid37556) (uid37556) 
* Archive: Member moved from WIM__Scheduler.h in project /id/dag_PF3/sw/pkg/wim/core/project.pj[dag_PF3.sw.pkg.wim_COMMON_IC222GC_VarP] to WIM__Scheduler.h in project /id/dag_PF3/sw/pkg/wim/core/coreGenPF3GC/project.pj[dag_PF3.sw.pkg.wim_COMMON_GenPF3GC_VarX].
* Archive: Revision 1.4 2012/04/25 13:49:50CEST Gottwalles Dirk (uid37556) (uid37556) 
* Archive: DC MR 25131: W222, E007/GC, WIM: Implementation of exceptions
* Archive: DC MR 25823: BR222 E7.2: Implementation of L3 delivery (XML-Files)
* Archive: DC MR 21251: W222, E007/GC, WIM: ComplexFunction of Warning 0x2001A6 Kurvenlicht
* Archive: DC MR 25710: W222, E007/GC, WIM: Inactive handling messages show up after 600ms - WDM35020
* Archive: DC MR 25126: W222, E007/GC, WIM: Behaviour of sync acoustics - WDM35391, 35418, 35392, 35389, 35396, 35421
* Archive: Revision 1.3 2012/04/04 13:37:21CEST 07_BH_FA Partnerroom-SSH-9 (uid37556) (uid37556) 
* Archive: DC MR 24870: W222, E007/GC, WIM: Implement changes from Review ORM2907
* Archive: DC MR 25007: W222, E007/GC, WIM: Displacement of handling messages - WDM20280
* Archive: DC MR 25041: Do not specify message propagation in message description files
* Archive: DC MR 25095: W222, E007/GC, WIM: Improvement of Timer accuracy for display role - WDM 25704
* Archive: DC MR 25034: Reduction of lag times in case of vehicle locked
* Archive: DC MR 25393: W222, E007/GC, WIM: No cancel of interval acoustic - WDM31269, ÄLP2895
* Archive: Revision 1.2 2012/01/13 11:55:16CET 07_BH_FA Partnerroom-SSH-9 (uid37556) (uid37556) 
* Archive: DC MR 24093: W222, E007/GC, WIM: Acoustic warning does not block display - WDM20499
* Archive: DC MR 23683: W222, E007/GC, WIM: Sync acoustic is cancelled by async acoustic WDM21143
* Archive: DC MR 24088: W222, E007/GC, WIM: Warning blocks display WDM22837, WDM23219
* 
*    Rev 1.6   Apr 26 2011 09:48:54   SCHL_Dirk.Gottwalles
* DC MR 21809: B222/GC: WIM: Not automatic acknowledged message is acknowledged
* DC MR 21658: E004/AC, WIM: Lower priority activation feedback is is displayed bevor higher prior warning
* DC MR 21808: BR222/AC, WIM: Mapping of config "Luftfeder" wrong
* DC MR 21258: WIM: Display lag time not reset on KL15r Off
* 
*    Rev 1.5   Nov 19 2010 16:04:14   SCHL_Dirk.Gottwalles
* DC MR21122 BR222: WIM reaction at wakeupreq.
* DC MR21302 BR222/AC: Optimierung Aufruf Checkfunktion WIM
* DC MR20423 W222: WIM new acoustics requirements
* DC MR21177 Implementation of first WarnDB for E003
* DC MR21336 WIM: Using Enumeration Symbols for State/Widget Mapping
* 
*    Rev 1.4   Sep 03 2010 12:24:42   SCHL_Lars.Gruenewald
* DC MR20924 WIM: Wakeup Warnings not allways wakes up the Display
* DC MR20460 W222: activation of KOMBIINTERN warning 0x200068 in E002 sample
* DC MR20681 E002/AC, Startup MR WMN-AC
* 
*    Rev 1.3   Jul 09 2010 18:01:48   SCHL_Lars.Gruenewald
* DC MR 20710 Vr222 WIM: Menue is in Display before warning
* DC MR 20545 WIM: Extension of HMI Interface for E001.2
* 
*    Rev 1.2   Jun 30 2010 14:36:40   SCHL_Lars.Gruenewald
* DC MR 20629 Configuration of Display Handler
* 
*    Rev 1.1   Jun 25 2010 12:22:12   SCHL_Lars.Grünewald
* DC MR 20566  WIM222: WIM Part2 for E001
* DC MR 20629 Configuration of Display Handler
* DC MR 20639 WIM: Adaption of HMI part for E001.1 
* DC MR 20620 Startup-MR for dynamical area manager (prio)
* DC MR 20661 Br222: WIM: ICOM Reinitialization
* DC MR 20662 Needed patches for WarnDB E001
* DC MR 20560 Implementation of first WarnDB for E001
* DC MR 20490 W222 E001: start up MR SFG
* 
*    Rev 1.0   Jun 11 2010 14:07:32   SCHL_Thomas.Godemann
* Initial revision.
* 
* --------------------------------------------------------------------------
* Date      | Author | Reason     | Change
* --------------------------------------------------------------------------
* 10-06-03    LarGru   MR20481      Initial revision for W222
*
*******************************************************************************/

/******************************************************************************
** Header Files (Only those that are needed in this file)
*******************************************************************************/

/* System Header Files */
#include "cdef.h"

/* Foreign headerfiles */

/* Own headerfiles */

/******************************************************************************
* Definition of exported global data used by Class
* Macros, Enumerations, Types,  Forward declarations
*******************************************************************************/

   /**
   * Enumeration of display request change events
   */
   typedef enum
   {
      WIM__nInitRequestDsp,           /* Init the state handler                                             */
      WIM__nKeepActRegistered,        /* At least one Warning with "KeepActive" is registered               */
      WIM__nNoKeepActRegistered,      /* No Warning with "KeepActive" is registered                         */
      WIM__nWakeUpRegistered,         /* At least one Warning with "WakeUp" is registered                   */
      WIM__nNewWarningRequested,      /* A new warning was requested for Display                            */
      WIM__nNoWarningRequested,       /* No more warnings are requested for Display                         */
      WIM__nKl15rOffEdge,             /* Car state changed KL15ROff edge                                    */
      WIM__nWakeKeepActRegistered,    /* At least one warning with "WakeUp" and "KeepActive" is registered  */
      WIM__nNoOfDspReqChangeEvents    /* number of events                                                   */
   } WIM__tenDspReqChangeEvents;

   /**
   * structure containing dynamic data of messages used by scheduler & state handler
   */
   typedef struct
   {
      /**
      * Qualifier for display and acoustic. Set by state handler, used by Scheduler
      * to identify messages with request for output (display/acoustic)
      * @range  byte (lower 4 bit display/upper 4 bit acoustic)
      * @values display bits (0..3)
      *    0 - WIM__nNoRequest      (no display request)     
      *    1 - WIM__nNoQualifier    (roller-mode/permanent)  
      *    2 - WIM__nQualNew        (warning: normal message) 
      *    4 - WIM__nQualUrgt       (warning: urgent message)        
      *    8 - WIM__nQualHdl        (handling: always urgent)
      * @values acoustic bits (4..7)
      *    0 - WIM__nAcuReleased    (no acoustic request)     
      *    1 - WIM__nAcuRequested   (acoustic request active)  
      *    2 - WIM__nAcuSyncUrgen   (urgent flag set) 
      *    4 - WIM__nAcuTdElapsed   (acoustic tone delay elapsed)
      *    8 - WIM__nAcuWaitForTerm (wait for acoustic ends)
      */ 
      uint8 biQualifier : 8;

      /**
      * Acu Restart flag: acoustic is active because of retrigger/register of message
      * in playing state and restart to play
      * @range  boolean
      * @values True/False 
      */
      uint8 biAcuRestart : 1;

      /**
      * State of the Acoustic 
      * @range  3 bit
      * @values 
      *    0 - WIM__nAcuStateInactive    (no acoustic request)   
      *    1 - WIM__nAcuStateWaiting     (waiting for acoustic channel)  
      *    2 - WIM__nAcuStateWaitDsp     (waiting for display part of sync message)
      *    3 - WIM__nAcuStateToneDelay   (waiting for tone delay timer)
      *    4 - WIM__nAcuStatePlaying     (a message is playing now)
      *    5 - WIM__nAcuStateTerm        (a single acoustic is terminated or cancelled)
      *    6 - WIM__nAcuStateAutoQuit    (a message was terminated, cancelled or deleted)
      *    7 - WIM__nAcuStateWaitForTerm (a message was cancelled or deleted)
      */
      uint8 biAcuState : 3;
   
      /**
      * Displayed flag: message is active and is/was displayed? 
      * @range  boolean
      * @values True/False 
      */
      uint8 biDisplayed : 1;

      /**
      * Acu Retriggered flag: acoustic is active because of a retrigger
      * @range  boolean
      * @values True/False 
      */
      uint8 biAcuRetriggered : 1;
   
      /**
      * Registered flag: message is active? 
      * @range  boolean
      * @values True/False 
      */
      uint8 biRegistered : 1;

      /**
      * State of the (display) message 
      * @range  3 bit
      * @values 
      *    0 - WIM__nInactive
      *    1 - WIM__nWaiting
      *    2 - WIM__nWaitForDsp
      *    3 - WIM__nModalPhase     (t: 0..500ms)
      *    4 - WIM__nNormalPhase    (t: 500..5000ms)
      *    5 - WIM__nContinousPhase (t: > 5000ms)
      *    6 - WIM__nManuQuit       (manually confirmed)
      *    7 - WIM__nAutoQuit       (canceled/deleted during display)
      *    8 - WIM__nPreConfirmed
      */
      uint8 biDisplayState : 4;
   
      /**
      * Canceled flag: message was canceled? 
      * @range  boolean
      * @values True/False 
      */
      uint8 biCanceled : 1;
   
      /**
      * Fault memory flag: message is stored in fault memory? 
      * @range  boolean
      * @values True/False 
      */
      uint8 biFaultMemoryEntry : 1;
   
      /**
      * Warning Message Notification flag: message was reported for WMN 
      * @range  boolean
      * @values True/False 
      */
      uint8 biMsgReportedWmn : 1;

      /**
      * Flag, indicates that an (interval)acoustic has already been played since activation
      * @range  boolean
      * @values True/False 
      */
      uint8 biAcousticPlayed : 1;

   } WIM__tstMsgState;

   /*******************************
   * ACCESS MACROS TO DYNAMIC DATA
   ********************************/

   /**
   * Returns the qualifier byte (display & acoustic) for the given message 
   */
   #define WIM__mu8GetQualifier(enMsg) \
      (WIM__astMsgStates[(enMsg)].biQualifier)

   /**
   * Macros to Get/Set the acoustic retrigger flag
   */
   #define WIM__mu8GetAcuRetriggered(enMsg) \
      (WIM__astMsgStates[(enMsg)].biAcuRetriggered)
   #define WIM__mSetAcuRetriggered(enMsg, boRetriggered) \
      (WIM__astMsgStates[(enMsg)].biAcuRetriggered = (boRetriggered))


   /**
   * Macros to Get/Set the acoustic qualifier (higher 4 Bits)
   */
   #define WIM__mu8GetAcuQualifier(enMsg) \
      ((enMsg) < WIM_nenNoOfMessages ? WIM__mu8GetAcuQual_Hlp(enMsg) : WIM__nAcuReleased)
   #define WIM__mu8GetAcuQual_Hlp(enMsg) \
      ((WIM__astMsgStates[(enMsg)].biQualifier >> 4) & 0x0F)


   /**
   * Macros to Get/Set the current display state (state handler data)
   */
   #define WIM__mu8GetDspState(enMsg) \
      ((enMsg) < WIM_nenNoOfMessages ? WIM__mu8GetDspState_Hlp(enMsg) : WIM__nInactive)
   #define WIM__mu8GetDspState_Hlp(enMsg) \
      (WIM__astMsgStates[(enMsg)].biDisplayState)

   #define WIM__mSetDspState(enMsg, enState)                   \
      if((enMsg) < WIM_nenNoOfMessages)                        \
      {                                                        \
         WIM__astMsgStates[(enMsg)].biDisplayState = (enState);\
      }                                                        \
       

   /**
   * Macro checking for displayed state of a message
   */
   #define WIM__mboMsgIsDisplayed(enMsg)                                     \
      (   (   (WIM__astMsgStates[(enMsg)].biDisplayState == WIM__nWaiting)   \
           && (WIM__astMsgStates[(enMsg)].biDisplayed     == 1))             \
       || (WIM__astMsgStates[(enMsg)].biDisplayState == WIM__nWaitForDsp)    \
       || (WIM__astMsgStates[(enMsg)].biDisplayState == WIM__nModalPhase)    \
       || (WIM__astMsgStates[(enMsg)].biDisplayState == WIM__nNormalPhase)   \
       || (WIM__astMsgStates[(enMsg)].biDisplayState == WIM__nContinousPhase))

   /**
   * Macro checking for active state of a message
   */
   #define WIM__mboMsgIsActive(enMsg)                                         \
      (   (WIM__astMsgStates[(enMsg)].biDisplayState == WIM__nWaiting)       \
       || (WIM__astMsgStates[(enMsg)].biDisplayState == WIM__nModalPhase)    \
       || (WIM__astMsgStates[(enMsg)].biDisplayState == WIM__nNormalPhase)   \
       || (WIM__astMsgStates[(enMsg)].biDisplayState == WIM__nContinousPhase))

   /**
   * Macros checking for waiting/not displayed state of a message
   */
   #define WIM__mboMsgIsWaitForInitialDsp(enMsg)                              \
      (   (WIM__astMsgStates[(enMsg)].biDisplayState == WIM__nWaiting)       \
       && (WIM__astMsgStates[(enMsg)].biDisplayed     == 0))

   /**
   * Macros to Get/Set the displayed flag 
   */
   #define WIM__mboGetDisplayedFlag(enMsg) \
      ((bool)WIM__astMsgStates[(enMsg)].biDisplayed) 
   #define WIM__mSetDisplayedFlag(enMsg, boState) \
       WIM__astMsgStates[(enMsg)].biDisplayed = (boState) 

   /**
   * Macros to Get/Set the played flag 
   */
   #define WIM__mboGetAcuPlayedFlag(enMsg) \
      ((bool)WIM__astMsgStates[(enMsg)].biAcousticPlayed) 
   #define WIM__mSetAcuPlayedFlag(enMsg, boState) \
       WIM__astMsgStates[(enMsg)].biAcousticPlayed = (boState) 

   /**
   * Macros to Get/Set the registered state (state handler data)
   */
   #define WIM__mboGetRegFlag(enMsg) \
      ((bool)WIM__astMsgStates[(enMsg)].biRegistered)
   #define WIM__mSetRegFlag(enMsg, boState) \
      WIM__astMsgStates[(enMsg)].biRegistered = (boState)

   /**
   * Macros to Get/Set the canceled state (state handler data)
   */
   #define WIM__mboGetCanceledFlag(enMsg) \
      ((bool)WIM__astMsgStates[(enMsg)].biCanceled)
   #define WIM__mSetCanceledFlag(enMsg, boState) \
      WIM__astMsgStates[(enMsg)].biCanceled = (boState)

   /**
   * Macros to Get/Set the fault memory flag 
   */
   #define WIM__mboGetFaultMemFlag(enMsg) \
      ((bool)WIM__astMsgStates[(enMsg)].biFaultMemoryEntry) 
   #define WIM__mSetFaultMemFlag(enMsg, boState)                 \
      WIM__astMsgStates[(enMsg)].biFaultMemoryEntry = (boState); \
      WIM__vSetFaultMemFlagICom(enMsg, boState)

   /**
   * Macros to Get/Set the biMsgReportedWmn flag state
   */
   #define WIM__mboGetWmnFlag(enMsg) \
      ((bool)WIM__astMsgStates[(enMsg)].biMsgReportedWmn)
   #define WIM__mSetWmnFlag(enMsg, boState) \
      WIM__astMsgStates[(enMsg)].biMsgReportedWmn = (boState)

   /**
   * Macros to Get/Set the acoustic state
   */
   #define WIM__mu8GetAcuState(enMsg) \
      (WIM__astMsgStates[(enMsg)].biAcuState)
   #define WIM__mSetAcuState(enMsg, boAcuState) \
      (WIM__astMsgStates[(enMsg)].biAcuState = (boAcuState))

   /**
   * Macros to Get/Set the acoustic restart flag
   */
   #define WIM__mu8GetAcuRestart(enMsg) \
      (WIM__astMsgStates[(enMsg)].biAcuRestart)
   #define WIM__mSetAcuRestart(enMsg, boAcuRestart) \
      (WIM__astMsgStates[(enMsg)].biAcuRestart = (boAcuRestart))

/************************************************************************/
/* Seat belt warnings with acoustics                                    */
/************************************************************************/

   /**
    * Rear seat belt warning Hil-Id
    */
   #define WIM__nRearSeatBeltHilId           WIM_nen0x200666
   
   /**
    * Belt warning Hil-Id
    */
   #define WIM__nBeltWarningHilId            WIM_nen0x200371
   
   /**
    * Pre-belt warning Hil-Id
    */
   #define WIM__nPreBeltWarningHilId         WIM_nen0x200372

/******************************************************************************
* CLASS DEFINITION
*******************************************************************************/

#ifdef TOGETHER /* open C++ class */
/**
* Ressource scheduler class, assigns display and acoustic channel
*/
class WIM__Scheduler {
public:
#endif
      
/******************************************************************************
*   Class Attributes
*******************************************************************************/

/* System Wide Scope */
#ifdef TOGETHER
public:
#endif

#ifdef QAC_Analysis
#pragma PRQA_MESSAGES_OFF 2300
#endif /* QAC_Analysis */
    
/**
 * dynamic state of messages 
 * @range  see definition of WIM__tstMsgState
 * @values see definition of WIM__tstMsgState
 */
extern WIM__tstMsgState WIM__astMsgStates[];

/**
 * @brief The number of blocked SLAck's
 */
extern uint8 WIM__u8SlackDisplayBlocked;

/* File Local Scope */
#ifdef TOGETHER
private:
#endif

/******************************************************************************
*   Class Operations
*******************************************************************************/

/* Package Global Scope */
#ifdef TOGETHER
public:
#endif
      
   /**
   * display master (valid WIM-enum or WIM_nenInvalidMsg if none)
   * Warning in display.
   */
   extern WIM_tenMsg WIM__enDspMaster;

   /**
   * display master waiting (valid WIM-enum or WIM_nenInvalidMsg if none)
   * Warning waiting for display. WIM__vDspWarningRequest was done but no Acknowledge received until now.
   */
   extern WIM_tenMsg WIM__enDspMasterWaiting;
   
   /**
   * display master (valid WIM-enum or WIM_nenInvalidMsg if none)
   * Slack in display.
   */
   extern WIM_tenMsg WIM__enDspSlackMaster;

   /**
   * display master waiting (valid WIM-enum or WIM_nenInvalidMsg if none)
   * Slack waiting for display. WIM__vDspWarningRequest was done but no Acknowledge received until now.
   */
   extern WIM_tenMsg WIM__enDspSlackMasterWaiting;

   /**
   * display favourite (valid WIM-enum or WIM_nenInvalidMsg if none)
   */
   extern WIM_tenMsg WIM__enDspFavourite;

   /**
   * Indicator for sound power failure
   */
   extern bool WIM__boSoundPowerFail;

#ifdef QAC_Analysis
#pragma PRQA_MESSAGES_ON 2300
#endif /* QAC_Analysis */

   /** 
   * FORWARD Acoustic Master as HIL-ID
   * into DPOOL and HMI by message
   *   @return  void
   *   @param   WIM_tenMsg Message identifier
   *   @author  L.Gruenewald, Schleissheimer GmbH 
   */
   void WIM__vPublishAcuMaster(WIM_tenMsg enAcuMaster);

   /**
   * Power-On initialisiation of scheduler class
   *   @return  void
   *   @param   none
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM__vSchedulerInit(void);

   /**
   * Trigger scheduling
   * Sets an internal state, that will cause scheduling process in cyclic function
   *   @return  void
   *   @param   none
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM__vTriggerSchedule(void);

   /**
   * Allow scheduling, called at LCL Init 
   *   @return  void
   *   @param   none
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM__vStartSchedule(void);

   /**
   * Stop search for new master
   *   @return  void
   *   @param   none
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM__vStopSchedule(void);

   /**
   * Disable scheduling, called at LCL Off 
   *   @return  void
   *   @param   none
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM__vEndSchedule(void);

   /**
   * This function returns the current displayed message if any.
   *   @return  identifier of message - or WIM_nInvalidMsg if not present
   *   @param   none
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   WIM_tenMsg WIM__enGetDisplayMaster(void);

   /**
   * This function returns the message that is waiting for display assignment.
   *   @return  identifier of message - or WIM_nInvalidMsg if not present
   *   @param   none
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   WIM_tenMsg WIM__enGetDisplayMasterWaiting(void);

   /**
   * This function returns the current slack that is waiting for display assignment.
   *   @return  identifier of message - or WIM_nenInvalidMsg if not present
   *   @param   none
   *   @author  A.Wagner, Schleissheimer GmbH 
   */
   WIM_tenMsg WIM__enGetDisplaySlackMasterWaiting(void);

   /**
   * This function returns the current acoustic message if any.
   *   @return  identifier of message - or WIM_nInvalidMsg if not present
   *   @param   none
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   WIM_tenMsg WIM__enGetAcousticMaster(void);

   /**
   * This function counts the delay timers used for synchronisation. The SFG 
   * function returns the number of BaseTicks needed to reach the synchronisation
   * point. Used for synchroneous/display synchroneous acoustics.
   *   @return  void
   *   @param   none
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM__vCountSyncDelay(void);

   /**
   * Timer callback function.
   * Called if the display master change delay timers have elapsed.
   * - WIM__nTimerAcuDelModal   timer modal output phase
   * - WIM__nTimerAcuDelNormal  timer normal output phase
   * - WIM__nTimerDspDelModal   timer modal output phase
   * - WIM__nTimerDspDelNormal  timer normal output phase
   *   @return  void
   *   @param   enTimer: Timer identifier, xCorrTag: Correlation tag (message Id)
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM__vDelayTimer(WIM__tenTimer enTimer, WIM__txCorrTag xCorrTag);

   /**
   * Starts the ToneDelayTimer
   *   @return  void
   *   @param   enMsg: Message the timer was started with
   *   @author  A.Wagner, Schleissheimer GmbH
   */
   void WIM__vToneDelayTimerStart(WIM_tenMsg enMsg);

   /**
   * Tone Delay callback function.
   * Called if the delay timer has elapsed.
   * - WIM__nTimerAcuTDElapsed
   *   @return  void
   *   @param   none
   *   @author  A.Wagner, Schleissheimer GmbH 
   */
   void WIM__vToneDelayTimerElapsed(void);
      
   /**
   * This is the first phase of scheduler operation called from foreground.
   * Depending on the current master's state it will be checked if a new request 
   * with a higher priority will displace current display or acoustic master.
   * Display blink and acoustic frequencies are requested here. The synchronisation
   * conditions are checked in WIM__vScheduleRessourceReq at a later point. Do to 
   * the order of function calls (WIM SchedulerPrioCheck, SFG, WIM SchedulerReq)
   * requested frequencies may be already available at the call of 
   * WIM__vScheduleRessourceReq.  
   *   @return  void
   *   @param   none
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM__vSchedulePrioCheck(void);

   /**
   * Search loop for finding a new favourite and setting, if found, as master. Also the
   * Synchronisation conditions are checked within this function and current master is set, 
   * replaced or released for acoustics 
   *   @return  void
   *   @param   none
   *   @author  A.Wagner, Schleissheimer GmbH 
   */
   void WIM__vScheduleAcoustics(void);

   /**
   * This is the second phase of scheduler operation called from the base tick
   * function. Synchronisation conditions are checked within this function and
   * current master is set, replaced or released for both display and acoustics. 
   *   @return  void
   *   @param   none
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM__vScheduleRessourceReq(void);

   /**
   * This is the second phase of scheduler slack operation called from the base 
   * tick function. Synchronisation conditions are checked within this function 
   * and current master is set, replaced or released for display.
   *   @return  void
   *   @param   none
   *   @author  A.Wagner, Schleissheimer GmbH 
   */
   void WIM__vScheduleRessourceReqSlack(void);

   /**
   * Inform applications about display master change
   *   @return  void
   *   @param   HIL Id of new master
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM__vDspChangeContainer(uint32 u32HilId);

   /**
   *   Check all relevant information for Display Requests and 
   *   Request/Release the Display.
   *  
   *   @return  void
   *   @param   WIM__tenDspReqChangeEvents   Trigger event for new check
   *   @author  L.Gruenewald, Schleissheimer GmbH 
   */
   void WIM__vRequestDisplayStateHdl(WIM__tenDspReqChangeEvents enEvent);

   /**
   * Pack the message specific data into the uint32 message parameter
   *  
   *   @return  message data
   *   @param   enMsgEnum   MsgEnum for warning display request
   *   @author  L.Gruenewald, Schleissheimer GmbH 
   */
   uint32 WIM__u32CreateMsgDataReqWarn(WIM_tenMsg enMsgEnum);

   /**
   * This is the scheduler only for slacks.
   *   @return  void
   *   @param   none
   *   @author  A.Wagner, Schleissheimer GmbH 
   */
   void WIM__vScheduleSlack(void);

   void WIM__vDspChangeContainer_GC(uint32 u32HilId);
/* File Local Scope */
#ifdef TOGETHER
private:
#endif

   /**
   * Get the last message in the priority level of the given message.
   *  
   *   @return  last message of priority level
   *   @param   message inside prio level
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   /*# static WIM_tenMsg WIM__enGetLevelLastMsg(WIM_tenMsg enMsg); */


#ifdef TOGETHER /* close the C++ class */
};
#endif
/********************
**  CLASS END
*********************/
#endif /* WIM__SCHEDULER_H */
