/* Generated by Together */
#ifndef WIM__REQUESTCONTROL_H
#define WIM__REQUESTCONTROL_H
/******************************************************************************
*=====================    Copyright by Continental AG    ======================
*******************************************************************************
* Titel        : WIM__RequestControl.h
*
* Description  : Package private interface of Request-control class:
*                Request control checks the conditions under which a message
*                will be activated or deactivated.
*
* Responsible  : L.Gruenewald, Schleissheimer GmbH
*
* Guidelines   : SMK 3.3  
*
* Template name: OOLite Codefile, Revision 1.0
*
* CASE-Tool    : Together Controlcenter, Version 6.2
*
* Revision List: (Will be filled by PVCS)
* Archive: $Log: WIM__RequestControl.h  $
* Archive: Revision 1.2.1.4 2014/03/21 12:19:00CET Wagner-EXT, Alexander (uidw3785) 
* Archive: DC MR 39404 : 213-AC, WIM: Changes in CAN flag handling and persistent storage of Wake IC warning states
* Archive: Revision 1.2.1.3 2013/09/17 13:13:24CEST Immel-EXT, Marc (uid37561) 
* Archive: DC MR 34947: prevent PF3 compiler warnings
* Archive: DC MR 34940: BR213, WIM: Acoustic of door warning shall not be retriggered by another door
* Archive: DC MR 34883: WIM: Persistent storage of warn states for wake-IC warnings
* Archive: Revision 1.2.1.2 2012/11/21 12:44:17CET Immel-EXT, Marc (uid37561) 
* Archive: Initial revision
* Archive: Member added to project /id/dag_PF3/sw/pkg/wim/core/coreGenPF3AC/project.pj
* Archive: Revision 1.2 2012/11/21 12:44:17CET Immel-EXT, Marc (uid37561) 
* Archive: Migration of WIM-AC from PVCS to MKS
* Archive: - used release: DC.SW.PAC.WIM_205IC_AC_COMMON_VarW.V01.00.pre17
* Archive: Revision 1.1 2011/07/07 13:43:02CEST uid37556 
* Archive: Initial revision
* Archive: Member added to project /id/dag_PF3/sw/pkg/wim/core/coreGenPF3AC/project.pj
*    Rev 1.5   Apr 05 2012 13:35:12   SCHL_Dirk.Gottwalles
* DC MR 24870: W222, E007/GC, WIM: Implement changes from Review ORM2907
* DC MR 25007: W222, E007/GC, WIM: Displacement of handling messages - WDM20280
* DC MR 25041: Do not specify message propagation in message description files
* DC MR 25095: W222, E007/GC, WIM: Improvement of Timer accuracy for display role - WDM 25704
* DC MR 25034: Reduction of lag times in case of vehicle locked
* DC MR 25393: W222, E007/GC, WIM: No cancel of interval acoustic - WDM31269, ÄLP2895
* DC MR 24871: W222, E007/AC, WIM: Implement changes from Review ORM2907
* 
*    Rev 1.4   Jan 13 2012 16:18:54   SCHL_Dirk.Gottwalles
* DC MR 24093: W222, E007/GC, WIM: Acoustic warning does not block display - WDM20499
* DC MR 23683: W222, E007/GC, WIM: Sync acoustic is cancelled by async acoustic WDM21143
* DC MR 24088: W222, E007/GC, WIM: Warning blocks display WDM22837, WDM23219
* DC MR 24089: W222,E007,AC, WIM: New configuration values Chauffeur_Avl and ShiftStyle_Variant
* DC MR 24343: W222, E007/AC, WIM: Patch for 0x2000BC and 0x2000C1 (Country coding), WDM23191
* 
*    Rev 1.3   Jul 13 2011 15:35:38   SCHL_Dirk.Gottwalles
* DC MR 22485: BR222, E006 Implementation of xml-files and style guide
* DC MR 22396: BR222: New acoustic for rearseatbeltwarning ÄLP2571
* DC MR 22456: Permanent Display menu - hybrid (GC)
* DC MR 21811: BR222: WIM: New Keywords/functions ÄLP2444, Part II
* DC MR 22265: W222, E006/AC, WIM:Change of Timeout behaviour
* DC MR 22261: W222, E006/AC, WIM: New keyword for WarnDB TIMEOUT_NOT_ENG_START, ÄLP2574
* DC MR 22260: W222, E006/AC, WIM: New keyword for WarnDB TIMEOUT_KL15_NOT_ENG_START, ÄLP2573
* DC MR 22092: W222, E006/AC, WIM: Door warning state is not correct evaluated for undefined values
* 
*    Rev 1.2   Nov 19 2010 16:04:14   SCHL_Dirk.Gottwalles
* DC MR21122 BR222: WIM reaction at wakeupreq.
* DC MR21302 BR222/AC: Optimierung Aufruf Checkfunktion WIM
* DC MR20423 W222: WIM new acoustics requirements
* DC MR21177 Implementation of first WarnDB for E003
* DC MR21336 WIM: Using Enumeration Symbols for State/Widget Mapping
* 
*    Rev 1.1   Jun 11 2010 14:01:08   SCHL_Thomas.Godemann
* DC MR20480 AC, Startup MR for Modul WIM in E001
* DC MR20481 GC, Startup MR for Modul WIM in E001
* 
*    Rev 1.0   Jun 07 2010 13:19:54   SCHL_Thomas.Godemann
* Initial revision.
* 
* --------------------------------------------------------------------------
* Date      | Author | Reason     | Change
* --------------------------------------------------------------------------
* 10-06-03    LarGru   MR20480      Initial revision for W222
*
****************************************************************************/

/***************************************************************************
** Header Files (Only those that are needed in this file)
****************************************************************************/

/* System Header Files */
#include "cdef.h"

/* Foreign headerfiles */

/* Own headerfiles */

/******************************************************************************
* Definition of exported global data used by Class
* Macros, Enumerations, Types,  Forward declarations
*******************************************************************************/
/*
* Timeout flag access
*/
#define WIM__boGetTimeoutFlag(enMsgTo) \
        WIM__boGetFlag(WIM__au8TimeoutFlags, (uint16)(enMsgTo))
#define WIM__vSetTimeoutFlag(enMsgTo,boState) \
        WIM__vSetFlag(WIM__au8TimeoutFlags, (uint16)(enMsgTo), (boState))

/*
* Timeout Kl15On NotEngStart flag access
*/
#define WIM__boGetTimeoutKl15OnNotEngStartFlag(enMsgTo) \
        WIM__boGetFlag(WIM__au8TimeoutKl15OnNotEngStartFlags, (uint16)(enMsgTo))
#define WIM__vSetTimeoutKl15OnNotEngStartFlag(enMsgTo,boState) \
        WIM__vSetFlag(WIM__au8TimeoutKl15OnNotEngStartFlags, (uint16)(enMsgTo), (boState))

/*
* Timeout NotEngStart flag access
*/
#define WIM__boGetTimeoutNotEngStartFlag(enMsgTo) \
        WIM__boGetFlag(WIM__au8TimeoutNotEngStartFlags, (uint16)(enMsgTo))
#define WIM__vSetTimeoutNotEngStartFlag(enMsgTo,boState) \
        WIM__vSetFlag(WIM__au8TimeoutNotEngStartFlags, (uint16)(enMsgTo), (boState))

/*
* RetriggerOnEvent flag access
*/
#define WIM__boGetRetriggerFlag(enMsgTo) \
        WIM__boGetFlag(WIM__au8RetriggerFlags, (uint16)(enMsgTo))
#define WIM__vSetRetriggerFlag(enMsgTo,boState) \
        WIM__vSetFlag(WIM__au8RetriggerFlags, (uint16)(enMsgTo), (boState))
#define WIM__vResetAllRetriggeredFlags() \
        memset(&(WIM__au8RetriggerFlags[0]), 0, WIM__nu8RetriggerByteCnt)

/*
* IntCondition State flag access
*/
#define WIM__boGetIntCondition(enIntExtCond) \
        WIM__boGetFlag(WIM__au8IntCondStateFlags, (uint16)(enIntExtCond))
#define WIM__vSetIntCondition(enIntExtCond,boState) \
        WIM__vSetFlag(WIM__au8IntCondStateFlags, (uint16)(enIntExtCond), (boState))
/*
* IntCondition Retrigger flag access
*/
#define WIM__boGetIntConditionRetrig(enIntExtCond) \
        WIM__boGetFlag(WIM__au8IntExtCondRetrigFlags, (uint16)(enIntExtCond))
#define WIM__vSetIntConditionRetrig(enIntExtCond,boState) \
        WIM__vSetFlag(WIM__au8IntExtCondRetrigFlags, (uint16)(enIntExtCond), (boState))
/*
* Int/ExtCondition Check flag access
*/
#define WIM__boGetIntExtConditionCheck(enIntExtCond) \
        WIM__boGetFlag(WIM__au8IntExtCondCheckFlags, (uint16)(enIntExtCond))
#define WIM__vSetIntExtConditionCheck(enIntExtCond,boState) \
        WIM__vSetFlag(WIM__au8IntExtCondCheckFlags, (uint16)(enIntExtCond), (boState))
#define WIM__vSetIntConditionCheck(enIntExtCond,boState) \
        WIM__vSetFlag(WIM__au8IntExtCondCheckFlags, (uint16)(enIntExtCond), (boState))
#define WIM__vSetExtConditionCheck(enIntExtCond,boState) \
        WIM__vSetFlag(WIM__au8IntExtCondCheckFlags, (uint16)(enIntExtCond), (boState))

/*
* ExtCondition State flag access
*/
#define WIM__boGetExtCondition(enExtCond) \
        WIM__boGetFlag(WIM__au8ExtCondStateFlags, (uint16)(enExtCond))
#define WIM__vSetExtCondition(enExtCond,boState) \
        WIM__vSetFlag(WIM__au8ExtCondStateFlags, (uint16)(enExtCond), (boState))

/*
* ExtCondition Retrigger flag access
*/
#define WIM__boGetExtConditionRetrig(enIntExtCond) \
        WIM__boGetFlag(WIM__au8IntExtCondRetrigFlags, (uint16)(enIntExtCond))
#define WIM__vSetExtConditionRetrig(enIntExtCond,boState) \
        WIM__vSetFlag(WIM__au8IntExtCondRetrigFlags, (uint16)(enIntExtCond), (boState))

/******************************************************************************
* CLASS DEFINITION
*******************************************************************************/
#ifdef TOGETHER /* open C++ class */

/**
* Request control class, checks conditions and boundary conditions of messages
*/
class WIM__RequestControl {
public: 
#endif

/******************************************************************************
*   Class Attributes
*******************************************************************************/

/* System Wide Scope */
#ifdef TOGETHER
public:
#endif
  
/* Package Global Scope */


/* File Local Scope */
#ifdef TOGETHER
private:
#endif

   /**
   * Flag, indicating whether request control is active or not
   * @range  boolean
   * @values True: active, False: inactive
   */
   /*# static bool WIM__boRequestControlActive; */

/***************************************************************************
*   Class Operations
***************************************************************************/

/* Package Global Scope */
#ifdef TOGETHER
public:
#endif

   /**
   * Power-on initialisation of request control class
   *   @return  void
   *   @param   none
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM__vReqCtrlInit(void);

   /**
   * start request control. Start the timers triggering the event task. In the 
   * interval of these timers the check functions of the messages inside the
   * check-containers are called.
   * At start send to all check-functions the Init-event.
   *   @return  void
   *   @param   none
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM__vReqCtrlStart(void);

   /**
   * stop request control. Cancel the timers triggering the event task. Send all
   * Check-functions in all containers the Deinit event.
   *   @return  void
   *   @param   none
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM__vReqCtrlStop(void);

   /**
   * call checkfunctions of all changed IC internal and external conditions
   *   @return  void
   *   @param   none
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM__vCheckIntExtConditionChanged(void);

   /**
   * Check function container handling. Check functions of all messages are
   * called (25ms foreground) are called within this function. 
   *   @return  void
   *   @param   none
   *   @author  D.Gottwalles, Schleissheimer GmbH 
   */
   void WIM__vReqCtrl25ms(void);

   /**
   * RETRIGGER_ON_EVENT callback for event KL15Off 
   *   @return  void
   *   @param   none
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM__vReqCtrlRetriggerKL15Off(void);

   /**
   * RETRIGGER_ON_EVENT callback for event RTGR_ADBLUE 
   *   @return  void
   *   @param   none
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM__vReqCtrlRetriggerAdBlue(void);

   /**
   * WIM request internal interface 
   * - Register a message if the message conditions and ground conditions are true
   * - Retrigger a message if the message conditions and ground conditions are true
   *   Retrigger is similar to register but has always effect if message has been
   *   confirmed (independent from attributes) 
   * - Cancel a message if the message ground conditions are no longer true.
   * - Delete a message if the message conditions are no longer true oror the 
   *   message deactivation condition is true.
   * If a message is already active and Register is requested, the call is ignored.
   * The same is True for cancel and delete. The behaviour of delete differs only
   * in one point. If the message has a fault memory entry, this will be deleted
   * if allowed by attribute configuration. A Delete following a Cancel will be
   * ignored.
   *   @return  void
   *   @param   enMsg: message enum, enEvent: WIM_nRegister/WIM_nCancel/WIM_nDelete
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM__vRequest(WIM_tenMsg enMsg, WIM__tenEventIntern enEvent);

   /**
   * reset all internal state flags to zero
   *   @return  void
   *   @param   boResetAll: True - reset all flags, False: rest only subset
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM__vInitStateFlagArrays(bool boResetAll);

   /**
   * helper function: get state of flag
   *   @return  bool: State of flag: True, flag set, False otherwise
   *   @param   uint8* pu8FlagArray: data array for flag check
   *   @param   uint16 u16FlagIdx: index of flag to check
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   bool WIM__boGetFlag(uint8* pu8FlagArray, uint16 u16FlagIdx);

   /**
   * message timeouts: set state of timeout flag
   *   @return  void
   *   @param   uint8* pu8FlagArray: data array for flag check
   *   @param   uint16 u16FlagIdx: index of flag to check
   *   @param   bool boState: State to set True - set flag, False - clear flag
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM__vSetFlag(uint8* pu8FlagArray, uint16 u16FlagIdx, bool boState);

   /**
   * The function converts a HIL ID to the according WIM enum
   *   @return  WIM_tenMsg: enum of message or WIM_nenInvalidMsg if no message 
   *   @param   none
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   WIM_tenMsg WIM__enHilId2Enum(uint32 u32HilId);

   /**
   * Handle IC internal conditions: set/clear event state flag and recheck 
   * message 
   *   @return  void
   *   @param   u32HilId: HIL ID of the related message
   *   @param   WIM__tenEventIntern enEvt: WIM__nRegister, WIM__nRetrigger, WIM__nDelete
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM__vHandleIntCondition_AC(uint32 u32HilId, WIM__tenEventIntern enEvt);

   /**
   * Warning states handled by RequestControl has to be restored.
   *   @return  void
   *   @param   void
   *   @author  L.Gruenewald, Schleissheimer GmbH 
   */
   void WIM__vStartRestoreWarningsRequestControl_AC(void);

   /**
   * Warning states handled by RequestControl has to be reset.
   *   @return  void
   *   @param   void
   *   @author  L.Gruenewald, Schleissheimer GmbH 
   */
   void WIM__vStartResetWarningsRequestControl_AC(void);

   /**
   * Check if the actuallly WakeIC Warning is active.
   *   @return  TRUE, if actually Warning is WakeIC
   *   @param   u32IndexWakeIc: Index of WakeIC message
   *   @author  A.Wagner, Schleissheimer GmbH 
   */
   bool WIM__boGetWakeICState(uint32 u32IndexWakeIc);

      /**
   *   Set the WakeICState for WakeIC warning
   *   @return  void
   *   @param   u32IndexWakeIc: Index of WakeIC message
   *   @param   boNewState: State to set True - set State Bit, False - clear State Bit 
   *   @author  A.Wagner, Schleissheimer GmbH 
   */
   bool WIM__vSetWakeICState (uint32 u32IndexWakeIc, bool boNewState);

      /**
   *   Get if Msg is a WakeIC warning
   *   @return  void
   *   @param   enMsg: message enum
   *   @author  A.Wagner, Schleissheimer GmbH 
   */
   uint32 WIM__u32GetWakeICMsg (WIM_tenMsg enMsg);

/* File Local Scope */
#ifdef TOGETHER
private:
#endif

   /**
   * Helper function calling a container check-function
   *   @return  void
   *   @param   enMsg: ID of message, enEvt event (WIM__nInit, WIM__nDeinit, WIM__nCyclic) 
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   /*# static inline void WIM__vCallContainerFct(WIM_tenMsg enMsg, WIM__tenEventIntern enEvt); */

#ifdef TOGETHER /* close the C++ class */
};
#endif
/********************
**  CLASS END
*********************/
#endif /* WIM__REQUESTCONTROL_H */
