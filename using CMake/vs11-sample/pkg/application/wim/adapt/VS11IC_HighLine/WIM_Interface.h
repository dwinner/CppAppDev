/* Generated by Together */
#ifndef WIM_INTERFACE_H
#define WIM_INTERFACE_H
/******************************************************************************
*=====================   Copyright by Continental AG     ======================
*******************************************************************************
* Titel        : WIM_Interface.h
*
* Description  : export interface of package WIM
*                All functions of the package that are externally visible are 
*                defined here (system and client interfaces)
*
* Responsible  : L.Gruenewald, Schleissheimer GmbH
*
* Guidelines   : SMK 3.3  
*
* Template name: OOLite Codefile, Revision 1.0
*
* CASE-Tool    : Together Controlcenter, Version 6.2
*
* Revision List: (Will be filled by PVCS)
* Archive: $Log: WIM_Interface.h  $
* Archive: Revision 1.1.3.4 2013/09/17 13:24:02CEST Immel-EXT, Marc (uid37561) 
* Archive: DC MR 34944: WIM: Persistent storage of warn states for wake-IC warnings
* Archive: DC MR 34942: BR213, WIM: Acoustic of door warning shall not be retriggered by another door
* Archive: Revision 1.1.3.3 2013/08/16 13:29:56CEST Wagner-EXT, Alexander (uidw3785) 
* Archive: DC MR 33822 : IC213EL-GC WIM: display synchroneous periodic tone not stopped with display off: WDM62157
* Archive: DC MR 33932 : IC213EL GC WIM: Initial sound requests for warnings does not work if sound system is not ready
* Archive: DC MR 33999 : BR213GC-EL, E005, WIM, CWMDL: API split - ORM5621
* Archive: DC MR 34028 : BR213EL, E005, StyleGuide Validation and implementation
* Archive: DC MR 34202 : BR213IC-GC-EL, WIM: Missing HIL output for seat belt warning acoustics - Folow-Up 33655
* Archive: DC MR 34326 : BR213-GC-EL/E005.1, WIM: Display is on for 2 minutes even when warning has disappeared
* Archive: DC MR 34547 : BR213-EL, E005.1/GC,WIM: Removal of QAC warning
* Archive: DC MR 34706 : BR213-GC-EL, E005.1: Chance DOCG implementation in WIM and TPOL
* Archive: DC MR 34781 : BR213-GC-EL, E005.1, WIM: Inconsistent display output in Fault Memory
* Archive: Revision 1.1.3.2 2012/05/18 10:58:13CEST Immel-EXT, Marc (uid37561) 
* Archive: Initial revision
* Archive: Member added to project /id/dag_PF3/sw/pkg/wim/core/coreGenPF3/project.pj
* Archive: Revision 1.9 2012/05/18 10:58:13CEST uid37556 
* Archive: Member moved from WIM_Interface.h in project /id/dag_PF3/sw/pkg/wim/core/project.pj[dag_PF3.sw.pkg.wim_COMMON_IC222GC_VarP] to WIM_Interface.h in project /id/dag_PF3/sw/pkg/wim/core/coreGenPF3/project.pj[dag_PF3.sw.pkg.wim_COMMON_genPF3_VarX].
* Archive: Revision 1.8 2012/05/10 17:21:01CEST Gottwalles Dirk (uid37556) (uid37556) 
* Archive: DC MR 25842: BR222/E7.2/GC: WIM: HIL Fix Loudness Feedback (WDM31515)
* Archive: DC MR 25916: W222, E007/GC, WIM: Changes on display-block by sound only warning - WDM35459
* Archive: DC MR 25913: W222, E007/AC, HIL: Mapping of WIM sound types
* Archive: DC MR 25704: W222, E007/GC, WIM: Fix for corrupted sound - WDM35438
* Archive: Revision 1.7 2012/04/19 14:42:29CEST 07_BH_FA Partnerroom-SSH-9 (uid37556) (uid37556) 
* Archive: DC MR 25146: W222, E007/GC, WIM: Priorities for roll handling - WDM35385
* Archive: DC MR 25141: W222, E007/GC, WIM: SBW/WIM Acoustic corrections - WDM21151, WDM34246
* Archive: Revision 1.6 2012/04/04 15:31:34CEST 07_BH_FA Partnerroom-SSH-9 (uid37556) (uid37556) 
* Archive: DC MR 24870: W222, E007/GC, WIM: Implement changes from Review ORM2907
* Archive: DC MR 25007: W222, E007/GC, WIM: Displacement of handling messages - WDM20280
* Archive: DC MR 25041: Do not specify message propagation in message description files
* Archive: DC MR 25095: W222, E007/GC, WIM: Improvement of Timer accuracy for display role - WDM 25704
* Archive: DC MR 25034: Reduction of lag times in case of vehicle locked
* Archive: DC MR 25393: W222, E007/GC, WIM: No cancel of interval acoustic - WDM31269, ÄLP2895
* Archive: Revision 1.5 2012/01/20 10:47:38CET 07_BH_FA Partnerroom-SSH-9 (uid37556) (uid37556) 
* Archive: DC MR 24746: BR222 E7.1: Implementation of L3 MDB, WDB for E7.1
* Archive: DC MR 24995: IC222 GC: HMI Synchronization: Clock generation/Basic Mechanisms
* Archive: DC MR 24327: W222, E007/GC, WIM: Implement changes from Review ORM3245, ORM3314
* 
*    Rev 1.11   Jan 20 2012 14:19:54   SCHL_Dirk.Gottwalles
* DC MR 23690: E007/AC WIM reduce coreload
* DC MR 23692: W222, E007/AC: Warnung Parkbremse 0x2001A8 ÄLP2607
* DC MR 23765: W205, E007/AC, WIM: Patch for 0x2000BC and 0x2000C1 (Country coding), WDM23191
* DC MR 24330: W205, E007/GC, WIM: Takeover MR for 23683, 24093, 24088
* DC MR 24098: BR205: Implementation of L3 MDB, WDB for E007
* 
*    Rev 1.10   Jan 13 2012 16:18:56   SCHL_Dirk.Gottwalles
* DC MR 24093: W222, E007/GC, WIM: Acoustic warning does not block display - WDM20499
* DC MR 23683: W222, E007/GC, WIM: Sync acoustic is cancelled by async acoustic WDM21143
* DC MR 24088: W222, E007/GC, WIM: Warning blocks display WDM22837, WDM23219
* DC MR 24089: W222,E007,AC, WIM: New configuration values Chauffeur_Avl and ShiftStyle_Variant
* DC MR 24343: W222, E007/AC, WIM: Patch for 0x2000BC and 0x2000C1 (Country coding), WDM23191
* 
*    Rev 1.9   Dec 02 2011 14:50:04   SCHL_Dirk.Gottwalles
* DC MR 23223: W222, E007/AC: Warnung Parkbremse 0x2001A8 ÄLP2607
* DC MR 23256: W222GC:E006 new volume interface
* DC MR 23803: Applications should send global direct messages
* DC MR 22621: BR222/E007/GC: HIL: DisplayColor
* 
*    Rev 1.8   Nov 18 2011 15:58:44   SCHL_Dirk.Gottwalles
* DC MR 23225: W222, E007/GC, WIM: Auto repeat feature for fault memory WDM19781
* DC MR 22930: BR222, E007/AC, WMN: Implementation of changes for new WEM
* DC MR 23685: W222, E007/GC, WIM: Acoustic macros access array out of bounds
* DC MR 23617: E007/AC WIM remove pragma 'callmode far'
* 
*    Rev 1.7   Aug 12 2011 16:39:34   SCHL_Dirk.Gottwalles
* DC MR 22652: W222, E006/AC, SCS: Remove warning management
* DC MR 22655: W222, E006/AC, WIM: Implmentation of complex key handling for warnings
* DC MR 22263: W222, E006/GC, WIM: Remove of unused sound Ids
* DC MR 22549: E006/GC: HIL: Get acoustics status indication for warnings
* DC MR 22686: Implementation of L3 Menu, Warn DB for E006
* DC MR 22733: W222, E006/GC, WIM: Implementation of complex key handling for warnings
* DC MR 21544: E006/GC: HIL: Get TPOL Menu HIL-ID and WIM-HIL-ID
* DC MR 22749: Integration of ARTEMMIS 3.2
* 
*    Rev 1.6   Mar 22 2011 16:07:24   SCHL_Dirk.Gottwalles
* DC MR21742: AC-E004-System: Introduction Boardtestmode
* DC MR21178: BR222 WIM: Suppression of Sound
* DC MR21659: E004/AC, WIM: Proper intergration of KL15 events
* DC MR21660: E004/AC, WIM: Extension of ManuQuit callback
* DC MR21661: E004/GC, WIM: Extension of ManuQuit callback
* DC MR21657: E004/GC, Wrong Hil-ID on CAN when display goes into sleep
* DC MR21743: GC-E004-System: Introduction Boardtestmode
* DC MR21256: Implementation of L1 WarnDB for E004
* DC MR21663: E004/AC, WIM: 0x2001D8 wird nicht mit KONFIG(SOFA_Elektrik) angezeigt
* DC MR21618: Follow-Up 21009 - Supress sound of front-lid-warning with SID 31,01,00,17
* DC MR21801: WIM: No scene switch to Full tubes when warning becomes activated
* 
*    Rev 1.5   Nov 19 2010 16:04:26   SCHL_Dirk.Gottwalles
* DC MR21122 BR222: WIM reaction at wakeupreq.
* DC MR21302 BR222/AC: Optimierung Aufruf Checkfunktion WIM
* DC MR20423 W222: WIM new acoustics requirements
* DC MR21177 Implementation of first WarnDB for E003
* DC MR21336 WIM: Using Enumeration Symbols for State/Widget Mapping
* 
*    Rev 1.4   Sep 17 2010 20:58:08   SCHL_Lars.Gruenewald
* DC MR21004 Startup MR for Module DOCG (Display Documentation Target Application)
* DC MR20908 E002/AC, Startup HIL
* 
*    Rev 1.3   Aug 27 2010 18:50:00   SCHL_Lars.Gruenewald
* DC MR20751  E002/AC, Introduce Warning 120 km/h
* DC MR20742  W222: Startup Modul SBW for E002
* DC MR20810  AC: Warning requests of Fuel Level Gauge (FLG)
* DC MR20835  E002/AC Startup SBC
* DC MR20951  Add property for priority to WIMController
* DC MR20589  BR222: WIM additional functionality for E002
* DC MR20216  ÄLP2191: new requirements for 0x2000F2
* DC MR20377  Exception entries in EXEA made by WIM
* DC MR20759  Implementation of first WarnDB for E002
* 
*    Rev 1.2   Jun 25 2010 12:22:12   SCHL_Lars.Grünewald
* DC MR 20566  WIM222: WIM Part2 for E001
* DC MR 20629 Configuration of Display Handler
* DC MR 20639 WIM: Adaption of HMI part for E001.1 
* DC MR 20620 Startup-MR for dynamical area manager (prio)
* DC MR 20661 Br222: WIM: ICOM Reinitialization
* DC MR 20662 Needed patches for WarnDB E001
* DC MR 20560 Implementation of first WarnDB for E001
* DC MR 20490 W222 E001: start up MR SFG
* 
*    Rev 1.1   Jun 11 2010 14:01:08   SCHL_Thomas.Godemann
* DC MR20480 AC, Startup MR for Modul WIM in E001
* DC MR20481 GC, Startup MR for Modul WIM in E001
* 
*    Rev 1.0   Jun 07 2010 13:20:46   SCHL_Thomas.Godemann
* Initial revision.
* 
* --------------------------------------------------------------------------
* Date      | Author | Reason     | Change
* --------------------------------------------------------------------------
* 10-06-03    LarGru   MR20480      Initial revision for W222
*                      MR20481      Initial revision for W222
*
*******************************************************************************/

/******************************************************************************
* Header Files (Only those that are needed in this file)
*******************************************************************************/

/* System Header Files */
#include "cdef.h"

/* Foreign headerfiles */
#include "DLIB_C1.h"

/* Own headerfiles */
#include "WIM_ce.h"

/******************************************************************************
* Definition of exported global data used by Class
* Macros, Enumerations, Types,  Forward declarations
*******************************************************************************/

/**
* Enumeration of display colors used by warnings.
*/
typedef enum
{
   WIM_enColorWhite,
   WIM_enColorYellow,
   WIM_enColorRed,
   WIM_enInvalidColor
} WIM_tenDisplColor;

/**
* Enumeration of acoustic types used by WIM
*/
typedef enum
{
   WIM_nenNoAcoustic,                /* no acoustic output                   */
   WIM_nenFrontalCollisionWarning,   /* single tone (950ms) */
   WIM_nenLateralCollisionWarning,   /* single tone (950ms) */
   WIM_nenPriority1Warning,          /* single tone (3700ms) */
   WIM_nenPriority2Warning,          /* single tone (2800ms) */
   WIM_nenContinuousWarning,         /* interval tone (continuous, 2800/xxxms) */
   WIM_nenAcknowledgement,           /* single tone (250ms) */
   WIM_nenAttentionAssistWarning,    /* single tone (5360ms) */
   WIM_nenSeatbeltWarningLevel1,     /* single tone */
   WIM_nenSeatbeltWarningLevel2,     /* single tone */
   WIM_nenRearSeatbeltWarning,       /* single tone */
   WIM_nenNoOfAcousticTypes          /* ------------------------------------ */
} WIM_tenAcousticType;





/******************************************************************************
* CLASS DEFINITION
*******************************************************************************/
#ifdef TOGETHER /* open C++ class */

/**
 * Interface of WIM package Warn and Information Management
 * @interface
 */
class WIM_Interface {
public: 
#endif

/******************************************************************************
*   Class Attributes
*******************************************************************************/

/* System Wide Scope */
#ifdef TOGETHER
public:
#endif
  
/* Package Global Scope */

/* File Local Scope */
#ifdef TOGETHER
private:

   /**
   * Memory for partition valid state (SYSID)
   */
   /*# static bool WIM__boPartitionValid; */

#endif

/******************************************************************************
*   Class Operations
*******************************************************************************/

/* System Wide Scope */  
#ifdef TOGETHER
public:
#endif

   /**************************
   * System interfaces
   ***************************/

   /**
   * Initialisiation of package components on transition to Active system state
   *   @return  void
   *   @param   none
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM_vInitActive(void);

   /**
   * Deinitialisiation of package components on leaving Active system state
   *   @return  void
   *   @param   none
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM_vDeinitActive(void);

   /**
   * Cyclic function called from CAM10
   *   @return  void
   *   @param   none
   *   @author  L.Gruenewald, Schleissheimer GmbH 
   */
   void WIM_v10Active(void);

   
   /**
   * Cyclic function called from CAM20
   *   @return  void
   *   @param   none
   *   @author  D. Gottwalles, Schleissheimer GmbH 
   */
   void WIM_v20Active(void);

   /**
   * Cyclic function called from CAM250
   *   @return  void
   *   @param   none
   *   @author  D. Gottwalles, Schleissheimer GmbH 
   */
   void WIM_v250Active(void);

   /**
   * Main function called from SFG pre-scheduling container
   *   @return  void
   *   @param   none
   *   @author  L.Gruenewald, Schleissheimer GmbH 
   */
   void WIM_vSfgPreSchedule(void);

   /**
   * Cyclic function called from SFG base tick container
   *   @return  void
   *   @param   none
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM_vSfgBaseTick(void);

   /**
   * Notification callback from CST KL15R On container
   *   @return  void
   *   @param   none
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM_vKl15ROn(void);

   /**
   * Kl15Off-edge handling: Call RequestDisplay state handler
   * for handling the Display requests
   *   @return  void
   *   @param   none
   *   @author  L. Gruenewald, Schleissheimer GmbH 
   */
   void WIM_vKl15ROff (void);

   /**
   * Notification callback from CST KL15 Off container
   *   @return  void
   *   @param   none
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM_vKl15Off(void);

   /**
   * Notification callback from CST KL15 On container
   *   @return  void
   *   @param   none
   *   @author  A.Wagner, Schleissheimer GmbH
   */
   void WIM_vKl15On(void);

   /**
   * Initialize CAN Tx data, called from CMON InitTxCanData container
   *   @return  void
   *   @param   none
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM_vInitTxCanData(void);

   /**
   * Called when new DPOOL data from ICom was received
   *   @return  void
   *   @param   EVHD_tenReceiveEvent enEvent
   *   @author  L.Gruenewald, Schleissheimer GmbH 
   */
   void WIM_vDoDpoolEvents(EVHD_tenReceiveEvent enEvent);

   /**
   * Called when new EVHD events are received
   *   @return  void
   *   @param   EVHD_tenReceiveEvent enEvent
   *   @author  D. Gottwalles, Schleissheimer GmbH 
   */
   void WIM_vDoGeneralEvents(EVHD_tenReceiveEvent enEvent);

   /**
   * Called when new EVHD timer events are received
   *   @return  void
   *   @param   EVHD_tenReceiveEvent enEvent
   *   @author  Martin Wenske, Schleissheimer GmbH 
   */
   void WIM_vDoGeneralTimerEvents(EVHD_tenReceiveEvent enEvent);

   /**************************
   * MMI interfaces
   ***************************/

   /**
   * Called when new DPOOL data from HMI was received
   *   @return  void
   *   @param   EVHD_tenReceiveEvent enEvent
   *   @author  L.Gruenewald, Schleissheimer GmbH 
   */
   void WIM_vDoHmiEvents(EVHD_tenReceiveEvent enEvent);


   /**************************
   * Services
   ***************************/

   /**
   * WIM interface for IC external events evaluated in check-functions
   * Triggers a call of the check-function and sets a flag storing the state
   * of the event. This functions sets the event flag
   *   @return  void
   *   @param   u8Function: code of the function triggering the event
   *   @param   u8Index: index of the event
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM_vSetExtEvent(WIM_tenExtEvtFunction enFunction, uint8 u8Index);

   /**
   * WIM interface for IC external events evaluated in check-functions
   * Triggers a call of the check-function and sets a flag storing the state
   * of the event. This functions sets the event flag and the Retrigger Flag.
   * The message is retriggered.
   *   @return  void
   *   @param   u8Function: code of the function triggering the event
   *   @param   u8Index: index of the event
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM_vRetriggerExtEvent(WIM_tenExtEvtFunction enFunction, uint8 u8Index);

   /**
   * WIM interface for IC external events evaluated in check-functions
   * Triggers a call of the check-function and sets a flag storing the state
   * of the event. This functions clears the event flag
   *   @return  void
   *   @param   u8Function: code of the function triggering the event
   *   @param   u8Index: index of the event
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM_vRelExtEvent(WIM_tenExtEvtFunction enFunction, uint8 u8Index);  

   /**
   * WIM interface for IC internal events evaluated in check-functions
   * Triggers a call of the check-function and sets a flag storing the state
   * of the event. This functions sets the event flag
   * The message is activated with "Register"
   *   @return  void
   *   @param   u32HilId: HIL ID of the related message
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM_vSetIntEvent(uint32 u32HilId);

   /**
   * WIM interface for IC internal events evaluated in check-functions
   * Triggers a call of the check-function and sets a flag storing the state
   * of the event. This functions sets the event flag.
   * The message is activated with "Retrigger" (reactivation)
   *   @return  void
   *   @param   u32HilId: HIL ID of the related message
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM_vRetriggerIntEvent(uint32 u32HilId);

   /**
   * WIM interface for IC internal  events evaluated in check-functions
   * Triggers a call of the check-function and sets a flag storing the state
   * of the event. This functions clears the event flag
   *   @return  void
   *   @param   u32HilId: HIL ID of the related message
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM_vRelIntEvent(uint32 u32HilId);

   /**
   * WIM interface for complex key handling events. The interface is used to send 
   * manual confimration event for a warning. This event has only effect if the warning 
   * is currently in the tri state "PreConfirmed". That means the driver has already manually
   * confirmed the event, but the acknowledge of an application is open.
   *   @return  void
   *   @param   u32HilId: HIL ID of the related message
   *   @author  D.Gottwalles, Schleissheimer GmbH 
   */
   void WIM_vManualConfirmEvent(uint32 u32HilId);

   /**
   * The function returns the current WIM message displayed if any (HIL ID)
   *   @return  u32HilId: message HIL-ID, WIM__nInvalidHilId if no msg displayed
   *   @param   none
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   uint32 WIM_u32GetCurrentDisplayMsg(void);

   /**
   * The function returns the "Registered" state of the message
   *   @return  True = registered, False = not registered
   *   @param   uint32 u32HilId: HIL ID of message to evaluate                       
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   bool WIM_boIsRegistered(uint32 u32HilId);
   
   /**
    * \brief Disable SLAck's
    */
   void WIM_vDisableSlacks(void);

   /**
    * \brief Enable SLAck's
    */
   void WIM_vEnableSlacks(void);

   /***************************
   ** Sound-Interface functions
   ****************************/
   
   /**
   * Sonud interface function.
   * The function will retrigger the sound of the specified warning.
   * Only in case that the warning is active and the sound channel is 
   * not blocked by another warning. If the sound if the specified 
   * warning is already playing, the sound is stopped and then started
   * again.
   *   @return  void
   *   @param   u32HilID: Hil-ID of the warning in 24Bit format (e.g. 0x20012300)
   *   @author  D.Gottwalles, Schleissheimer GmbH 
   */
   void WIM_vRetriggerSound(uint32 u32HilID); 
   
   /**
   * Sonud interface function.
   * The function will stop the sound of the specified warning immeadiatly.
   * The function will act only in case that the sound of the specified 
   * warning is currently playing.
   *   @return  void
   *   @param   u32HilID: Hil-ID of the warning in 24Bit format (e.g. 0x20012300)
   *   @author  D.Gottwalles, Schleissheimer GmbH 
   */
   void WIM_vStopSound(uint32 u32HilID); 
 
   /**
   * Display interface function.
   * The function will retrigger the Display without retriggering the sound, if
   * the warning is still in display. Only in case that the warning
   * is not in the display any longer, a sound output will be requested.
   *   @return  void
   *   @param   u32HilID: Hil-ID of the warning in 24Bit format (e.g. 0x20012300)
   *   @author  A.Wagner, Schleissheimer GmbH 
   */
   void WIM_vRetriggerDisplay(uint32 u32HilID);

   /***************************
   ** Diag-Interface functions
   ****************************/

   /**
   * DLIB interface function.
   * End diagnostic mode. Reset (modified) state of messagess
   *   @return  void
   *   @param   none
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   void WIM_vEndDiagnosticSession(void);

   /**
   * DLIB interface function.
   * Allows to switch on diagnostic mode and to activate or deactivate a message 
   * identified by HIL-Id. 
   *   @return  DLIB_tenReturn
   *   @param   boActivate: True > Register, False > Delete message 
   *   @author  T.Godemann, Schleissheimer GmbH 
   */
   DLIB_tenReturn WIM_enDiagSetWarning(bool boActivate, uint32 u32HilId);
 
   /**
   * DLIB interface function, for DocGen.
   * Allows to switch on diagnostic mode and to activate a message 
   * identified by HIL-Id. 
   *   @return  bool: true when requested Warning exists, false if not.
   *   @param   u32HilId: Hil-Id which should be displayed. 
   *   @author  L.Gruenewald, Schleissheimer GmbH 
   */
   bool WIM_boRemoteControlSetWarning(uint32 u32HilId);

   /**
   * DLIB interface function, for DocGen.
   * Allows to switch on diagnostic mode and to release warnings screen.  
   *   @return  void
   *   @param   void 
   *   @author  L.Gruenewald, Schleissheimer GmbH 
   */
   void WIM_vRemoteControlReleaseScreen(void);

   /**
   * DLIB interface function, for DocGen.
   * End diagnostic mode. Reset (modified) state of messagess
   *   @return  void
   *   @param   void
   *   @author  L.Gruenewald, Schleissheimer GmbH 
   */
   void WIM_vRemoteControlLeaveMode(void);
 
   /**
   * Interface function to query the display color of a warning.
   *   @return  WIM_tenDisplColor of the specified HIL-ID
   *   @param   u32HilId: 32Bit HIL-ID of the warning (e.g. 0x20048500)
   *   @author  D. Gottwalles, Schleissheimer GmbH 
   */
   WIM_tenDisplColor WIM_enGetdisplayColor(uint32 u32HilId);
#ifdef TOGETHER /* close the C++ class */
};
#endif
/********************
**  CLASS END
*********************/
#endif /* WIM_INTERFACE_H */
